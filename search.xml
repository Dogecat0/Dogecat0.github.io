<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript Full-Stack Series - 01 - Fundamentals</title>
      <link href="/2023/11/07/JavaScript-Full-Stack-Series-01-Fundamentals.html"/>
      <url>/2023/11/07/JavaScript-Full-Stack-Series-01-Fundamentals.html</url>
      
        <content type="html"><![CDATA[<h2 id="New-concept"><a title="New concept:" class="headerlink" href="#New-concept"></a>New concept:</h2><ul><li>Callback function: A callback function is a fuction passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. More details: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a> </li><li>Event handler: Event are signals fired inside the browser window that notify of changes in the browser or operating system. Programmers can create evetn handler code that will run when an event fires, allowing web pages to responde appropriately to change. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">Event handler</a></li></ul><p>(* Comparative thinkging: In Python, you can create an event handler using <a href="https://docs.djangoproject.com/en/4.2/topics/signals/">Django signals</a> which has the similar mechanism.)</p><ul><li>AJAX (Asynchronous JavaScript and XML): AJAX is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With AJAX, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started">AJAX</a></li></ul><p>(* Comparative thinkging: <a href="https://htmx.org/docs/">HTMX</a> is a modern JavaScript library that allows you to access AJAX, CSS Transitions, WebSockets, and Server-Sent Events directly in HTML, using attributes without writing JavaScript.)</p><ul><li>SPA (Single Page Application)</li><li>JavaScript libraries: jQuey, AngularJS, React, Vue.js, Backbone.js, etc.</li></ul><h2 id="Reviewed-concept"><a title="Reviewed concept:" class="headerlink" href="#Reviewed-concept"></a>Reviewed concept:</h2><ul><li>HTML (HyperText Markup Language): HTML is the code that is used to structure a web page and its content. (More details: <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics">HTML</a>)</li><li>CSS (Cascading Style Sheet): CSS is the code taht styles web content. (More details: <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">CSS</a>)</li><li>HTML forms: HTML forms are one of the main points of interaction between a user and a web site or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage. (More details: <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form">HTML Forms</a>)</li><li>HTTP request</li><li>DOM (Document Objcet Model): DOM connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. The DOM represents a document with a logical tree (More details: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM</a>)</li><li>Full-stack web development</li></ul><h2 id="Course-exercise"><a title="Course exercise:" class="headerlink" href="#Course-exercise"></a>Course exercise:</h2><ol><li>Review HTML</li><li>Review CSS</li><li>Review HTML forms</li><li>Create a diagram depicting the situation where the user creates a new note on the page <a href="https://studies.cs.helsinki.fi/exampleapp/notes">https://studies.cs.helsinki.fi/exampleapp/notes</a> by writing something into the text field and clicking the Save button. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user goes to the single-page app version of the notes app at <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/spa_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user creates a new note using the single-page version of the app. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_spa_diagram.md">Submmited diagram</a>.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full-Stack Series - 00 - Introduction</title>
      <link href="/2023/11/06/JavaScript-Full-Stack-Series-00-Introduction.html"/>
      <url>/2023/11/06/JavaScript-Full-Stack-Series-00-Introduction.html</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a title="Intro" class="headerlink" href="#Intro"></a>Intro</h2><p>I’ve been building a Python based website for a while now which mainly focuses on backend development using Django (The project is currently still under development, link to the demo repo: <a href="https://github.com/Dogecat0/inomad-demo">INOMAD</a>).</p><p>This Django project is my first web development project and a self-taught one. Although there has been some involvement of JavaScript in the project, I’ve never really had the chance to learn JavaScript in-depth, which seems to be a quite essential language for mordern web development. So, I’ve decided to start a full-stack course and also begin this series of blog posts about my learning journey. I believe it will help me reinforce the web development concepts I’ve learned so far, as well as learn new tools in a more structured way.</p><h2 id="Content"><a title="Content" class="headerlink" href="#Content"></a>Content</h2><p>This series will mainly cover the following topics based on the course itself:</p><ul><li>Fundamentals of Web Apps</li><li>React</li><li>Prgramming a server with Node.js and Express.js</li><li>Testing Express servers and React apps</li><li>User administration</li><li>Advanced state management</li><li>React router, custom hooks, styling app with CSS and webpack</li><li>GraphQL</li><li>TypeScript</li><li>React Native</li><li>CI/CD</li><li>Containers</li><li>Relationship databases</li></ul><h2 id="Course-Details"><a title="Course Details" class="headerlink" href="#Course-Details"></a>Course Details</h2><p>You can find the full course details in the following link: <a href="https://fullstackopen.com/en/about">Full Stack Open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
