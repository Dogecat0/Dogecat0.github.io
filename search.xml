<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Altering-Data-from-Server</title>
      <link href="/2023/12/03/JavaScript-Full-Stack-Series/03-Altering-Data-from-Server.html"/>
      <url>/2023/12/03/JavaScript-Full-Stack-Series/03-Altering-Data-from-Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog will touch the base of sosme conventions used by jason-server and REST APIS in general, taking a look at the URLs and HTTP request types, in REST.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Object spread syntax:<br>The object spread syntax is a JavaScript feature that is used to make shallow copies of JavaScript objects. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li>REST:<br>REST stands for Representational State Transfer. It is a software architectural style that defines a set of constraints to be used for creating Web services. In REST terminology, we refer to individual data objects, such as the notes in our application, as resources. Every resource has a unique address associated with it - its URL.</li><li>'S‚ÄôOLID:<br>Single responsibility principle, is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program‚Äôs functionality, which it should encapsulate. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. <a href="https://dogecat0.github.io/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html">More details</a><br>In front-end development, we often use promises to handle asynchronous operations such as network requests by using fetch method. <a href="https://javascript.info/promise-chaining#bigger-example-fetch">More details</a></li><li>then():<br>The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">More details</a></li><li>catch():<br>The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><h3 id="useEffect-hook"><code>useEffect</code> hook:</h3><p>The <code>useEffect</code> is deigned to be called unconditionally at the top level of React component. It is a React Hook that lets your synchronize a component with an external system. <a href="https://react.dev/reference/react/useEffect">More details</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Get-Data-from-Server</title>
      <link href="/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html"/>
      <url>/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog will touch the base of how to interact with server in React, how to use the <code>useEffect</code> hook to fetch data from server and more related concepts like <code>fetch</code>, <code>promises</code>, <code>event loop</code>.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Fetch method:<br>The fetch() method starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available. <a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">More details</a></li><li>Event loop:<br>The event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">More details</a></li><li>useEffect hook:<br>The <code>useEffect</code> is a React Hook that lets your synchronize a component with an external system. <a href="https://react.dev/reference/react/useEffect">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><h3 id="The-you-see-when-accessing-base-url-of-a-server">The <code>&#123;&#125;</code> you see when accessing base url of a server</h3><p>During the course we‚Äôre using JSON server. When you access the base url of a server, you will see a <code>&#123;&#125;</code>. This is because the server is returning a JSON object. The <code>&#123;&#125;</code> is the representation of the JSON object in the browser. This is not an eeror or problem, it is just how JSON Server handles requests to the root URL.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Forms</title>
      <link href="/2023/11/29/JavaScript-Full-Stack-Series/03-Forms.html"/>
      <url>/2023/11/29/JavaScript-Full-Stack-Series/03-Forms.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog covers how to handle forms in React, how to use the <code>useState</code> hook to handle the state of the form and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>useState hook:<br>The <code>useState</code> hook is a function that takes in an initial value and returns an array of two items using array destructuring: the current state and a function that updates it. <a href="https://react.dev/reference/react/useState">More details</a></li><li>Controlled component:<br>In HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with <code>setState()</code>. <a href="https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><h3 id="Three-important-parts-of-a-form">Three important parts of a form:</h3><ul><li>onSubmit:<br>Attached to a form element, <code>onSubmit</code> is an event handler triggered when the form is submitted, typically when the user clicks a submit button.</li><li>input value attribute:<br>This attribute is used to set the initial value of the input element. This cannot be edited.</li><li>onChange:<br>To enable editing of the input element, we have to attach an <code>onChange</code> event handler to the input element. This event handler is triggered every time the value of the input element changes, i.e. when the user types something into the input field.</li><li>if else statement:<br>In JavaScript, the ternary operator <code>condition ? exprIfTrue : exprIfFalse</code> is used to conditionally render something. Alternatively, we can also use the <code>if else</code> statement to conditionally do the same job.</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something else</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">condition <span class="token operator">?</span>   <span class="token comment">// do something</span>  <span class="token operator">:</span>   <span class="token comment">// do something else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Refactoring-the-code-to-use-multiple-components">Refactoring the code to use multiple components:</h3><ul><li>Keep the state in the parent component.</li><li>Pass the state and event handler down to the child component as props.</li><li>The child component calls the event handler with the appropriate parameters.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> Forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Rendering_Collections-and-Modules</title>
      <link href="/2023/11/28/JavaScript-Full-Stack-Series/03-Rendering-Collections-and-Modules.html"/>
      <url>/2023/11/28/JavaScript-Full-Stack-Series/03-Rendering-Collections-and-Modules.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog covers how to render collections in React, how to use the <code>map</code> method to iterate over an array of objects and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Map method:<br>The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">More details</a></li><li>Refacoring Modules:<br>Refactoring is the process of restructuring existing computer code‚Äîchanging the factoring‚Äîwithout changing its external behavior.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li><a href="https://dogecat0.github.io/2023/11/09/JavaScript-Full-Stack-Series-02-JavaScript.html">Destructuring assignment</a></li><li><a href="https://dogecat0.github.io/2023/11/12/JavaScript-Full-Stack-Series-02-State-and-Event-Handlers.html">Event Handler</a></li></ul><h2 id="üìù-Course-exercise">üìù Course exercise</h2><ol><li>Updates to part1 exercise courseinfo with refactorred modules and trying out JavaScript arrays methods like <code>map</code>. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-Comoplex_State_and_Debugging</title>
      <link href="/2023/11/12/JavaScript-Full-Stack-Series/02-Comoplex-State-and-Debugging.html"/>
      <url>/2023/11/12/JavaScript-Full-Stack-Series/02-Comoplex-State-and-Debugging.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog covers some more complex React state related knowledge, as well as some ways to debug React apps. This part of the course covers quite a bit of new concpets and theoretical details, which requires more time to digest and practice.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Batching:<br>React batches state updates to improve performance. This means that multiple setState() calls in a single component are batched together by React into a single update for the DOM. React processes state updates after event handlers have finished running.</li><li>Updater function:<br>The updater function is a function that is passed to the setState() method, e.g. you can use <code>setNumber(n =&gt; n + 1)</code> to update some state multiple times in one event.</li><li>Hooks:<br>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks are functions that let you ‚Äúhook into‚Äù React state and lifecycle features from function components. Hooks don‚Äôt work inside classes ‚Äî they let you use React without classes. <a href="https://react.dev/reference/react/hooks">More details</a><br>Rules of hooks:<br>Hooks are JavaScript functions, but they impose two additional rules:</li><li>Only call Hooks at the top level. Don‚Äôt call Hooks inside loops, conditions, or nested functions.</li><li>Only call Hooks from React function components. Don‚Äôt call Hooks from regular JavaScript functions.</li></ul><p>Examples:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// these are ok</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Juha Tauriainen'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> age <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this does not work!</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>foobar<span class="token punctuation">,</span> setFoobar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> age<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// also this is not good</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>rightWay<span class="token punctuation">,</span> setRightWay<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">notGood</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// and this is also illegal</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment">//...</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Spread Operator: <code>...</code>The spread operator is used to expand elements of an iterable (like an array) into individual elements. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><p>Why use spread operator in React?</p><ul><li>It is used to make a copy of an object or an array. to make sure the original state is not mutated.</li><li>By creating a new boject or array, you ensure that React recognizes the change in the state and re-renders the component accordingly.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li>Event Handling:<br>Event handlers must always be a function or a reference to a function. The button will not work if the event handler is set to a variable of any other type.</li></ul><h2 id="üìù-Course-exercise">üìù Course exercise:</h2><ol><li>Create a React app that displays the statistics of a feedback form. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/unicafe">Link to the repo</a></li><li>Create a React app that displays random anecdotes and the most voted one. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/anecdotes">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-State_and_Event_Handlers</title>
      <link href="/2023/11/12/JavaScript-Full-Stack-Series/02-State-and-Event-Handlers.html"/>
      <url>/2023/11/12/JavaScript-Full-Stack-Series/02-State-and-Event-Handlers.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This blog covers some more React component basics, demonstrating helper functions, JavaScript destructuring for cleaner code, and dynamic page rendering in React applications.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>State:<br>In React, components need to ‚Äúremember‚Äù things: the current input value, the current image, the shopping cart. In React, this kind of component specfic memory is called state. <a href="https://react.dev/learn/state-a-components-memory">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li>Destructuring assignment:<br>‚ÄúDestructuring make sthe assignment of variables very easy since we can use ti to extract and gather the values of an object‚Äôs properties into separate variables.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#destructuring">Full Stack Open</a>.</li><li>Event Handler</li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><h3 id="Destructuring-assignment-example">Destructuring assignment example:</h3><ul><li>From this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> prop<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> props<span class="token punctuation">.</span>age    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>To this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Then to this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The props that are passed to the component are destructured directly into variables <code>name</code> and <code>age</code>. This is a common pattern in React applications.</p><h3 id="Event-Handler">Event Handler:</h3><ul><li>Event Handler as a Function or Reference:<br>An event handler should be either a function or a function reference. Direct function calls as event handlers (like <code>onClick=&#123;setCounter(counter + 1)&#125;</code>) can lead to errors, as they execute immediately during rendering, causing unintended behavior like infinite re-renders.</li><li>Use of Arrow Functions:<br>To prevent immediate execution and control when the event handler is called (like on a user action), arrow functions are used. For example, <code>onClick=&#123;() =&gt; setCounter(counter + 1)&#125;</code> ensures that <code>setCounter</code> is called only when the button is clicked.</li></ul><h3 id="Useful-Notes">Useful Notes:</h3><ul><li>‚ÄúDo not ever try to guess what your code does. It is just better to use <code>console.log</code> and see with your own eyes what it does.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#changes-in-state-cause-rerendering">Full Stack Open</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-00-SES</title>
      <link href="/2023/11/10/Inomad-Dairy-00-SES.html"/>
      <url>/2023/11/10/Inomad-Dairy-00-SES.html</url>
      
        <content type="html"><![CDATA[<h2 id="ü•≥üéä">ü•≥üéä</h2><p>I have been thinking to start a series about the e-commerce platform <a href="https://github.com/Dogecat0/inomad-demo">Inomad</a> for quite a while now. However, I was not sure about the content of the series and how to structure it. The thinking is till going on but I‚Äôve decided to start it anyway. So, here we go, let‚Äôs begin with a small celebration today.</p><p>After almost a week waiting for the SES service to be approved, Inomad finally got the approval email from AWS. Thanks to the <a href="https://github.com/django-ses/django-ses">django-ses</a> package, I was able to set up the email service quite easily with just set <code>EMAIL_BACKEND = django_ses.SESBackend</code> in the <code>settings.py </code>file.</p><p>TBC‚Ä¶</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> AWS </tag>
            
            <tag> SES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-JavaScript</title>
      <link href="/2023/11/09/JavaScript-Full-Stack-Series/02-JavaScript.html"/>
      <url>/2023/11/09/JavaScript-Full-Stack-Series/02-JavaScript.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This post covers the basics of JavaScript together with the new concepts and lessons learned during this part of the course.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><h3 id="Variables">Variables</h3><ul><li>const:<br>The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.</li><li>let:<br>The let statement declares a block-scoped local variable, optionally initializing it to a value.</li></ul><h3 id="Arrays">Arrays</h3><ul><li>Concat():<br>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</li><li>Destructuring assignment:<br>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</li></ul><h3 id="Objects">Objects</h3><ul><li>Object literal:<br>An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).</li><li>Object methods and ‚Äúthis‚Äù:<br>A method is a function which is a property of an object. It is called using the syntax objectName.methodName(). In a method, this refers to the owner object. In other words, this.firstName means the firstName property of this object. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">More details</a></li><li>Bind:<br>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><ul><li>There are many similarities between JavaScript and Python, such as the syntax of for loop, functions like <code>map</code>, <code>reduce</code>, etc. However, there are also many differences between them, such as the way of declaring variables, the way of creating functions, etc. In short, the syntax of JavaScript is slightly a confusing thing for me so far when, unfortunately, everytime Python comes to my mind first. At the moment they‚Äôre like two angles fighting in my head‚Ä¶üòÇ</li></ul><h2 id="üìù-Course-exercise">üìù Course exercise</h2><ol><li>A simple React app that displays some contents of courses. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-React</title>
      <link href="/2023/11/08/JavaScript-Full-Stack-Series/02-React.html"/>
      <url>/2023/11/08/JavaScript-Full-Stack-Series/02-React.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This post will cover React and related concepts like Vite, Components, JSX, etc which comprise the part1-a of the course together with some of my thoughts and lessons learned.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>React:<br>React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of their applications efficiently. <a href="https://react.dev/">More details</a></li><li>Vite:<br>Vite is a modern frontend build tool that provides a faster and leaner development experience for web projects. It uses native ES modules for serving code instead of bundling during development, which results in significantly faster start times. It supports frameworks like React, Vue, Svelte, and more. <a href="https://vitejs.dev/">Mode details</a></li><li>React components:<br>Components are one of the core concepts of React. They are the foundation upon which you build user interfaces. <a href="https://react.dev/learn/your-first-component">More details</a></li><li>JSX:<br>JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. React components use JSX to represent the HTML markup. <a href="https://react.dev/learn/writing-markup-with-jsx">More details</a><br /><br>Main rules of JSX:<ul><li>Return a single root element</li><li>Use camelCase for HTML attributes</li><li>Close all tags</li></ul></li><li>Props: Props are short for properties. React components use props to communicate with each other. Every parent component can pass some information to its child components by give them props. <a href="https://react.dev/learn/passing-props-to-a-component">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><ul><li>‚ÄúSoftware development is hard. It gets even harder if one is not using all the possible available tools such as the web-console and debug printing with console.log. Professionals use both all the time and there is no single reason why a beginner should not adopt the use of these wonderful helper methods that will make life so much easier.‚Äù - <a href="https://fullstackopen.com/en/part1/introduction_to_react#props-passing-data-to-components">Full Stack Open</a></li><li>There are two ways to pass props to React components:  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The first way is to pass the props object to the component function and access the properties of the props object with dot notation.  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> course <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The second way is called destructuring assignment. It is a special syntax for neatly assigning values taken directly from an object to variables.<br><br>(* Comparative thinking: Think of it as a similar way of passing parameters to a function in Python but using different braces.)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-01-Fundamentals</title>
      <link href="/2023/11/07/JavaScript-Full-Stack-Series/01-Fundamentals.html"/>
      <url>/2023/11/07/JavaScript-Full-Stack-Series/01-Fundamentals.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>In this post, I will be covering the fundamentals of web apps, which is the part0 of the course and list the concepts I‚Äôve reviewed and learned so far.</p><span id="more"></span><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Callback function:<br>A callback function is a fuction passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. More details: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a></li><li>Event handler:<br>Event are signals fired inside the browser window that notify of changes in the browser or operating system. Programmers can create event handler code that will run when an event fires, allowing web pages to responde appropriately to change. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">Event handler</a></li></ul><p>(* Comparative thinkging: In Python, you can create an event handler using <a href="https://docs.djangoproject.com/en/4.2/topics/signals/">Django signals</a> which has the similar mechanism.)</p><ul><li>AJAX (Asynchronous JavaScript and XML):<br>AJAX is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With AJAX, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started">AJAX</a></li></ul><p>(* Comparative thinkging: <a href="https://htmx.org/docs/">HTMX</a> is a modern JavaScript library that allows you to access AJAX, CSS Transitions, WebSockets, and Server-Sent Events directly in HTML, using attributes without writing JavaScript.)</p><ul><li>SPA (Single Page Application)</li><li>JavaScript libraries:<br>jQuey, AngularJS, React, Vue.js, Backbone.js, etc.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li>HTML (HyperText Markup Language):<br>HTML is the code that is used to structure a web page and its content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics">More details</a></li><li>CSS (Cascading Style Sheet):<br>CSS is the code taht styles web content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">More details</a></li><li>HTML forms:<br>HTML forms are one of the main points of interaction between a user and a web site or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage. <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form">More details</a></li><li>HTTP request</li><li>DOM (Document Objcet Model):<br>DOM connects web pages to scripts or programming languages by representing the structure of a document‚Äîsuch as the HTML representing a web page‚Äîin memory. The DOM represents a document with a logical tree. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">More details</a></li><li>Full-stack web development</li></ul><h2 id="üìù-Course-exercise">üìù Course exercise:</h2><ol><li>Review HTML</li><li>Review CSS</li><li>Review HTML forms</li><li>Create a diagram depicting the situation where the user creates a new note on the page <a href="https://studies.cs.helsinki.fi/exampleapp/notes">https://studies.cs.helsinki.fi/exampleapp/notes</a> by writing something into the text field and clicking the Save button. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user goes to the single-page app version of the notes app at <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/spa_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user creates a new note using the single-page version of the app. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_spa_diagram.md">Submmited diagram</a>.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-00-Introduction</title>
      <link href="/2023/11/06/JavaScript-Full-Stack-Series/00-Introduction.html"/>
      <url>/2023/11/06/JavaScript-Full-Stack-Series/00-Introduction.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>I‚Äôve been building a Python based website for a while now which mainly focuses on backend development using Django (The project is currently still under development, Here is the link to <a href="https://github.com/Dogecat0/inomad-demo">INOMAD</a> demo repo).</p><p>This Django project is my first web development project and a self-taught one. Although there has been some involvement of JavaScript in the project, I‚Äôve never really had the chance to learn JavaScript in-depth, which seems to be a quite essential language for mordern web development. So, I‚Äôve decided to start a full-stack course and also begin this series of blog posts about my learning journey. I believe it will help me reinforce the web development concepts I‚Äôve learned so far, as well as learn new tools in a more structured way.</p><h2 id="üìñ-Content">üìñ Content</h2><p>This series will mainly cover the following topics based on the course itself:</p><ul><li>Fundamentals of Web Apps</li><li>React</li><li>Prgramming a server with Node.js and Express.js</li><li>Testing Express servers and React apps</li><li>User administration</li><li>Advanced state management</li><li>React router, custom hooks, styling app with CSS and webpack</li><li>GraphQL</li><li>TypeScript</li><li>React Native</li><li>CI/CD</li><li>Containers</li><li>Relationship databases</li></ul><h2 id="üéì-Course-Details">üéì Course Details</h2><p>You can find the full course details in the following link: <a href="https://fullstackopen.com/en/about">Full Stack Open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
