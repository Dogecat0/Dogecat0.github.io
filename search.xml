<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Inomad Dairy-04-infrastructure-07-Messaging</title>
      <link href="/2024/07/05/Inomad%20Dairy/04-infrastructure-07-Messaging.html"/>
      <url>/2024/07/05/Inomad%20Dairy/04-infrastructure-07-Messaging.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will explore the role of messaging systems in modern cloud infrastructure and their importance in enabling communication between distributed components, services, and applications. Messaging systems play a crucial role in building scalable, reliable, and decoupled architectures that can handle complex workflows and interactions in cloud environments.</p><span id="more"></span><p>Messaging is a fundamental concept in distributed systems, allowing components to communicate asynchronously and decoupling senders and receivers. Messaging systems are essential components of modern cloud infrastructure, providing a reliable and efficient way to enable communication between distributed components, services, and applications. These systems facilitate asynchronous communication, decoupling senders and receivers, and ensuring reliable message delivery in distributed environments.</p><h2 id="üì©-Messaging-Protocols-and-Standards"><strong>üì© Messaging Protocols and Standards</strong></h2><h2 id="1-AMQP-Advanced-Message-Queuing-Protocol">1. AMQP (Advanced Message Queuing Protocol)</h2><ul><li>Architecture: Standardized protocol for message-oriented middleware.</li><li>Use Cases: Enterprise messaging, IoT, financial systems.</li><li>Advantages: Interoperability, reliability, support for complex routing.</li><li>LimitationsL: Complexity, performance overhead in some use cases.</li></ul><h2 id="2-MQTT-Message-Queuing-Telemetry-Transport">2. MQTT (Message Queuing Telemetry Transport)</h2><ul><li>Architecture: Lightweight, publish-subscribe network protocol.</li><li>Use Cases: IoT, mobile messaging, low-bandwidth or unreliable networks.</li><li>Advantages: Lightweight, efficient for constrained environments.</li><li>Limitations: Limited quality of service options, not ideal for high-throughpout scenarios.</li></ul><h2 id="3-STOMP-Simple-Text-Oriented-Messaging-Protocol">3. STOMP (Simple Text Oriented Messaging Protocol)</h2><ul><li>Architecture: Simple, text-based protocol for message-oriented middleware.</li><li>Use Cases: WebSockets, real-time appllications.</li><li>Advantages: Simplicity, ease of use.</li><li>Limitations: Limited features compared to AMQP, less secure.</li></ul><h2 id="üí¨-Messaging-Patterns"><strong>üí¨ Messaging Patterns</strong></h2><h2 id="1-Point-to-Point">1. Point-to-Point</h2><ul><li>Description: One sender and one receiver.</li><li>Use Cases: task queues, load distribtuion.</li><li>Examples: AWS SQS, RabbitMQ (queue mode).</li></ul><h2 id="2-Publish-Subscribe">2. Publish-Subscribe</h2><ul><li>Description: One sender and multiple receivers.</li><li>Use Cases: Event distribution, notification systems.</li><li>Examples: Apache Kafka, AWS SNS, Google Pub/Sub</li></ul><h2 id="‚öôÔ∏è-Messaging-Technologies"><strong>‚öôÔ∏è Messaging Technologies</strong></h2><h2 id="1-Apache-Kafka">1. Apache Kafka</h2><ul><li>Architecture: Distributed event streaming platform.</li><li>Use Cases: Real-time data pipelines, stream processing, log aggregation.</li><li>Advantages: High throughput, fault tolerance, scalabitliy.</li><li>Limitations: Requires management of Kafka brokers and ZooKeeper, complex setup.</li></ul><h2 id="2-RabbitMQ">2. RabbitMQ</h2><ul><li>Architecture: Open-source message broker implementing AMQP.</li><li>Use Cases: Task queues, microservices communication.</li><li>Advantages: Easy to use, supports multiple messaging protocols and flexibility.</li><li>Limitations: Performance overhead with complex routing, single point of failure without clustering.</li></ul><h2 id="3-Amazon-SQS">3. Amazon SQS</h2><ul><li>Architecture: Fully managed message queuing service.</li><li>Use Cases: Decoupling applications, distributed systems.</li><li>Advantages: Serverless, fully managed, integrated with AWS ecosystem.</li><li>Limitations: Limited to point-to-point communication, eventual consistency.</li></ul><h2 id="4-Google-Pub-Sub">4. Google Pub/Sub</h2><ul><li>Architecture: Scalable event ingestion and delivery service, fully managed, real-time messaging.</li><li>Use Cases: Real-time analytics, event-driven architectures.</li><li>Advantages: Scalability, reliability, global availability and integration with Google Cloud services.</li><li>Limitations: Limited to Google Cloud Platform, pricing based on usage.</li></ul><h2 id="üî¥-Comparisons"><strong>üî¥ Comparisons</strong></h2><table><thead><tr><th><em>Feature</em></th><th><em>Apache Kafka</em></th><th><em>RabbitMQ</em></th><th><em>Amazon SQS</em></th><th><em>Google Pub/Sub</em></th></tr></thead><tbody><tr><td><strong>Message Model</strong></td><td>Log-based, Pub/Sub</td><td>Queue, Pub/Sub</td><td>Queue</td><td>Pub/Sub</td></tr><tr><td><strong>Delivery Guarantees</strong></td><td>At least once, Exactly once</td><td>At most once, At least once</td><td>At least once</td><td>At least once</td></tr><tr><td><strong>Scalability</strong></td><td>High</td><td>Moderate</td><td>High</td><td>High</td></tr><tr><td><strong>Ease of Use</strong></td><td>Moderate</td><td>Moderate</td><td>High</td><td>High</td></tr><tr><td><strong>Latency</strong></td><td>Low</td><td>Moderate</td><td>Low</td><td>Moderate</td></tr><tr><td><strong>Throughput</strong></td><td>High</td><td>Moderate</td><td>Moderate</td><td>High</td></tr><tr><td><strong>Management Overhead</strong></td><td>High</td><td>Moderate</td><td>Low</td><td>Low</td></tr><tr><td><strong>Best For</strong></td><td>Real-time data streaming</td><td>Task queues, microservices</td><td>Simple queues, AWS integration</td><td>Event-driven architectures</td></tr></tbody></table><h2 id="‚úÖ-Best-Practices"><strong>‚úÖ Best Practices</strong></h2><h2 id="1-Design-Considerations">1. Design Considerations</h2><ul><li>Decoupling: Ensure loose coupling between services to enhance scalability and resilience.</li><li>Message Durability: Choose appropriate message durability options based on use cases. (e.g. persistent queues for critical data).</li><li>Scalability: Design for horizontal scalability to handle increased load.</li><li>Security: Implement encryption, authentication, and authorization to secure messaging systems.</li></ul><h2 id="2-Monitoring-and-Mangaement">2. Monitoring and Mangaement</h2><ul><li>metrics: Monitor key metrics like message rate, latency, queue depth, and error rates.</li><li>Alerts: Set up alerts for critical thresholds to ensure timely response to issues.</li><li>Logging: Maintain comprehensive logs for debugging and autidting purposes.</li></ul><h2 id="3-Performance-Optimization">3. Performance Optimization</h2><ul><li>Batching: Use message batching to reduce overhead and increase throughput.</li><li>Compression: Enable compression to reduce message size and bandwith usasge.</li><li>Partitioning: Implement partitioning strategies for load balancing and parallel processing.</li></ul><p>Understanding and leveraging messaging technologies is crucial for building scalable, resilient, and efficient cloud architectures. By selecting the appropriate technology and implementing best practices, cloud engineers can ensure robust communication between services in diverse and demanding environments.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Messaging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-infrastructure-06-Development and Deployment</title>
      <link href="/2024/07/04/Inomad%20Dairy/04-infrastructure-06-Development.html"/>
      <url>/2024/07/04/Inomad%20Dairy/04-infrastructure-06-Development.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will explore the role of development and deployment technologies in modern cloud infrastructure and their importance in building scalable, reliable, and efficient web applications and services. Development technologies encompass a wide range of tools, frameworks, and practices that enable developers to create, deploy, and maintain software solutions in the cloud.</p><span id="more"></span><p>Development and deployment technologies play a crucial role in modern cloud infrastructure by providing developers with the tools and frameworks needed to build scalable, reliable, and efficient web applications and services. These technologies enable developers to write code, test applications, deploy updates, and monitor performance in a cloud environment, ensuring that software solutions meet the needs of users and organizations.</p><h2 id="üîó-Programming-Languages"><strong>üîó Programming Languages</strong></h2><ul><li>Python: Widely used for its simplicity and readability. Strong support in automation, scripting, and integrating with cloud services.</li><li>Java: Robust, platform-independent, and widely used in large-scale enterprise applications. Supports multithreading and high-performance systems.</li><li>Go: Known for its performance and efficiency in cloud-native applications. It‚Äôs statically typed and compiled, which help inbuilding reliable and efficient software.</li><li>JavaScript/Node.js: Essential for serverless architectures and building APIs. Offers a non-blocking I/O model, making it efficient for real-time applications.</li></ul><h2 id="üì¶-Frameworks-and-Libraries"><strong>üì¶ Frameworks and Libraries</strong></h2><ul><li>Flask/Django (Python): Flask is a lightweight web framework, while Django is a full-stack framework with built-in ORM and admin interface.</li><li>Spring Boot (Java): Simplifies microservices development. Integrates well with cloud platform like AWS and Azure.</li><li>Express.js (Node.js): Minimalist web framework for building RESTful APIs and server-side applications.</li><li>Gin (Go): Lightweight and fast web framework for building high-performance APIs and microservices.</li></ul><h2 id="üßë‚Äçüíª-Integrated-Development-Environments-IDEs"><strong>üßë‚Äçüíª Integrated Development Environments (IDEs)</strong></h2><ul><li>VS Code: Highly extensible with numerous plugins for cloud development, including Docker, Kubernetes, and cloud service integrations.</li><li>IntelliJ IDEA: Comprehensive support for Java and other JVM languages. Rich features for cloud development and integration.</li><li>PyCharm: Best suited for Python development with advanced features for debugging, testing, and deployment.</li><li>Eclipse: Versatile IDE supporting multiple languages, popular for Java development.</li></ul><h2 id="üéÆ-Version-Control"><strong>üéÆ Version Control</strong></h2><ul><li>Git: Widely used for distributed version control. Essential for collaboration, code review, and continuous integration/continuous deployment (CI/CD) pipelines.</li><li>GitHub/GitLab: Popular platform for hosting Git repositories, enabling collaboration, issue tracking, and project management, and integrated with cloud services.</li></ul><h2 id="üîß-Development-Practices"><strong>üîß Development Practices</strong></h2><ul><li>CI/CD pipelines automate the build, test, and deployment processes, ensuring code quality and reliability.</li><li>Infrastructure as Code (IaC): Managing and provisioning computing infrastructure through machine-readable definition files. (e.g. Terraform, CloudFormation, Pulumi)</li></ul><h2 id="ü´ô-Containerization-and-Orchestration"><strong>ü´ô Containerization and Orchestration</strong></h2><ul><li>Docker: Standar for containerizing applications. Allows for consistent environments across development, testing, and production.</li><li>Kubernetes: Industry-standard for managging containerized applications at scale. Offers features like automated deployment, scaling, and mangement of containerized applications.</li></ul><h2 id="üñ•Ô∏è-Serverless-Architecture"><strong>üñ•Ô∏è Serverless Architecture</strong></h2><ul><li>AWS Lambda: Allows running code without provisioning servers. Integrated with other AWS services.</li><li>Azure Functions: Event-driven serverless compute service. Supports multiple languages and integrates with Azure services.</li><li>Google Cloud Functions: Lightweight, event-based, asynchronous compute solution for cloud applications.</li></ul><h2 id="üìÅ-Databases"><strong>üìÅ Databases</strong></h2><ul><li>Relational Databases: SQL-based databases like MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.</li><li>NoSQL Databases: Document stores (MongoDB, CouchDB), Key-value stores (Redis, DynamoDB), Column-family stores (Cassandra, HBase), Graph databases (Neo4j, Amazon Neptune).</li></ul><p>More details on databases can be found in the <a href="https://dogecat0.github.io/2024/07/04/Inomad%20Dairy/04-Infrastructure-05-Database.html">previous post</a>.</p><h2 id="üìà-Monitoring-and-Logging"><strong>üìà Monitoring and Logging</strong></h2><ul><li>Prometheus: Open-source monitoring and alerting toolkit. Collects metrics from monitored targets and stores them in a time-series database.</li><li>Grafana: Visualization tool for monitoring data. Integrates with various data sources and provides customizable dashboards.</li><li>ELK Stack (Elasticsearch, Logstash, Kibana): Centralized logging and log analysis solution. Elasticsearch stores and indexes logs, Logstash processes and forwards logs, and Kibana visualizes log data.</li></ul><h2 id="üîí-Security-and-Compliance"><strong>üîí Security and Compliance</strong></h2><ul><li>OWASP Top 10: List of the most critical security risks to web applications. Includes vulnerabilities like injection, broken authentication, and sensitive data exposure.</li><li>SAST (Static Application Security Testing) and DAST (Dynamic Application Security Testing) tools help identify and remediate security vulnerabilities in applications.(e.g. SonarQube, OWASP ZAP)</li></ul><h2 id="‚úÖ-Best-Practices"><strong>‚úÖ Best Practices</strong></h2><ul><li>Automate Everything: Automate all aspects of deployment, from code commits to production rollouts, to reduce human error and increase consistency.</li><li>Use Version Control: Ensure all configurations and scripts are stored in version control systems like Git to track changes and facilitate rollback if needed.</li><li>Immutable Infrastrucutre: Deploy applications on immutable infrastructure where servers are not modified post-deployment. Instaed, deploy new serves with the new configuration.</li><li>Blue-Green Deployment: Minimize downtime and reduce risk by deploying new versions alongside exsiting ones and swtiching traffic only when the new version is verified.</li><li>Canary Releases: Gradually roll out chagnes to a small subset of users before full deployment, allowing for real-world testing and reducing risk.</li><li>Monitoring and Logging: Implement robust monitoring and logging to ensure visibility into application performance and quick detection of issues.</li><li>Security and Compliance: Integrate security checks into the CI/CD pipeline to ensure compliance with security standards and policies.</li></ul><p>Understanding and effectively utilizing development and deployment technologies is crucial for cloud engineers. These tools and practices not only enhance the efficiency and reliability of software delivery but also ensure that applications are secure, scalable, and resilient.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-Infrastructure-05-Database</title>
      <link href="/2024/07/04/Inomad%20Dairy/04-Infrastructure-05-Database.html"/>
      <url>/2024/07/04/Inomad%20Dairy/04-Infrastructure-05-Database.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will explore the role of databases in modern cloud infrastructure and their importance in storing, managing, and retrieving data for web applications and services. Databases are a critical component of cloud infrastructure, providing a structured and efficient way to store and access data for various use cases.</p><span id="more"></span><p>Databases play a crucial role in modern cloud infrastructure by providing a structured and efficient way to store, manage, and retrieve data for web applications and services. Databases are essential components of cloud-based solutions, enabling organizations to store and access data securely and efficiently.</p><h2 id="üîó-Relational-Databases-RDBMS"><strong>üîó Relational Databases (RDBMS)</strong></h2><h2 id="1-SQL-based-Databases">1. SQL-based Databases:</h2><ul><li>MySQL: Open-source, widely used for web applications. It supports various storage engines like InnoDb and MyISAM.</li><li>PostgreSQL: Open-source, known for its advanced features like full ACID compliance, complex queries, and extensibility.</li><li>Oracle Database: Enterprise-level database with robust performace, scalability, and extensive features for security and data management.</li><li>Microsoft SQL Server: Enterprise database taht integrates well with other Microsoft products and provides strong BI capabilities.</li></ul><h2 id="2-Advantages">2. Advantages:</h2><ul><li>ACID (Atomicity, Consistency, Isolation, Durability) compliance for transactional integrity.</li><li>Strong data consistency and referential integrity.</li><li>SQL provides powerful querying capabilities.</li></ul><h2 id="3-Use-Cases">3. Use Cases:</h2><ul><li>E-commerce platforms for product catalog and order management.</li><li>Financial applications for transaction processing and reporting.</li><li>Customer relationship management (CRM) systems for customer data management.</li><li>Enterprise resource planning (ERP) systems for inventory and supply chain management.</li></ul><h2 id="üìÅ-NoSQL-Databases"><strong>üìÅ NoSQL Databases</strong></h2><h2 id="1-Document-Stores">1. Document Stores:</h2><ul><li>MongoDB: Schema-less, stores data in JSON-like documents. It‚Äôs suitable for applications requiring flexible schema design.</li><li>CouchDB: Also sotres data in JSON format and supports ACID transactions but sues a more robust replication model.</li></ul><h2 id="2-Key-Value-Stores">2. Key-Value Stores:</h2><ul><li>Redis: In-memory data store with support for complex data types like lists, sets, and sorted sets. It‚Äôs used for caching, session management, and real-time analytics.</li><li>DynamoDB: Fully managed NoSQL database service by AWS, designed for high availability and scalability.</li></ul><h2 id="3-Column-Family-Stores">3. Column-Family Stores:</h2><ul><li>Cassandra: Designed for high write and read throughput, suitable for large-scale distributed systems.</li><li>HBase: Built on top of Hadoop, provides real-time read/write access to large datasets.</li></ul><h2 id="4-Graph-Databases">4. Graph Databases:</h2><ul><li>Neo4j: Optimized for graph-based queries, suitable for social networks, fraud detection, etc.</li><li>Amazon Neptune: Fully managed graph database service by AWS, supports property graph and RDF graph models.</li></ul><h2 id="5-Advantages">5. Advantages:</h2><ul><li>Flexible schema design.</li><li>High scalability andperformance for specific use cases.</li><li>Ofent optimized for specific types of queries. (e.g. graph queries, key-value lookups)</li></ul><h2 id="6-Use-Cases">6. Use Cases:</h2><ul><li>Real-time big data analytics.</li><li>Content management systems for flexible content storage.</li><li>Social networks for relationship mapping.</li><li>IoT applications for time-series data storage.</li></ul><h2 id="üÜï-NewSQL-Databases"><strong>üÜï NewSQL Databases</strong></h2><h2 id="1-Fetures">1. Fetures:</h2><ul><li>Aim to combine the ACID gurantees of traditional RDBMS with the scalability of NoSQL databases.</li><li>Provide SQL as the query language.</li></ul><h2 id="2-Examples">2. Examples:</h2><ul><li>Google Spanner: Golbally distributed, stronlgy consistent databae service by Google.</li><li>CockroachDB: Distributed SQL database with horizontal scalability and strong consistency.</li><li>WoltDB: In-memory database designed for high throughput and low latency.</li></ul><h2 id="3-Advantages">3. Advantages:</h2><ul><li>Strong consistency with high availability.</li><li>Support for complex queries with SQL.</li><li>Often provide automatic sharding and relication.</li></ul><h2 id="4-Use-Cases">4. Use Cases:</h2><ul><li>Financial applications requireing strong consistency.</li><li>Real-time analytics with complex queries.</li><li>E-commerce platforms with high transaction volumes.</li></ul><h2 id="‚òÅÔ∏è-Cloud-Native-Databases"><strong>‚òÅÔ∏è Cloud Native Databases</strong></h2><h2 id="1-Managed-Servives">1. Managed Servives:</h2><ul><li>AWS RDS: Managed relational database service by AWS, supports MySQL, PostgreSQL, Oracle, SQL Server, etc.</li><li>Azure SQL Database: Fully managed relational database service by Microsoft Azure.</li><li>Google Cloud SQL: manged MySQL and PostgreSQL database service by Google Cloud.</li></ul><h2 id="2-Serverless-Databases">2. Serverless Databases:</h2><ul><li>Amazon Aurora Serverless: On-demand, auto-scaling relational database service by AWS.</li><li>Azure Cosmos DB: Globally distributed, multi-model database service wiht serverless capabilities by Microsoft Azure.</li><li>Google Firestore: Serverless, NoSQL database service by Google Cloud.</li></ul><h2 id="3-Advantages-2">3. Advantages:</h2><ul><li>Reduced operational overhead with managed services.</li><li>Auto-scaling and high availability built-in.</li><li>Integration with cloud-antive tools and services.</li></ul><h2 id="4-Use-Cases-2">4. Use Cases:</h2><ul><li>Applications iwth variable or unpredictable workloads.</li><li>Microservices architectures requiring independent data stores.</li><li>Fast-growing startups needing quick scalability.</li></ul><h2 id="‚úÖ-Best-Practices-for-Database-Management"><strong>‚úÖ Best Practices for Database Management</strong></h2><h2 id="1-Data-Security">1. Data Security:</h2><ul><li>Encrypt data at rest and in transit.</li><li>Implement role-based access control.</li><li>Regularly audit and monitor database activity.</li></ul><h2 id="2-Performance-Optimization">2. Performance Optimization:</h2><ul><li>Use indexing to speed up queries.</li><li>Optimize queries and schema design.</li><li>Monitor database performance and tune configurations.</li></ul><h2 id="3-Scalability">3. Scalability:</h2><ul><li>Implement horizontal scaling where possible.</li><li>Use caching mechanisms to reduce load on the database.</li><li>Use sharding for distributed databases.</li></ul><h2 id="4-Backup-and-Recovery">4. Backup and Recovery:</h2><ul><li>Implement replication and automated failover.</li><li>Regularly back up data and test restoration procedures.</li><li>Use geographically distributed backups for disaster recovery.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-02-Stocks-02-MSFT</title>
      <link href="/2024/07/01/Investment/02-Stocks-02-MSFT.html"/>
      <url>/2024/07/01/Investment/02-Stocks-02-MSFT.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This post is part of my investment learning series where I explore various aspects of investing in stocks with the help of GPT. In this post, I will dig into Microsoft (MSFT), one of the tech giants that has been a dominant player in the technology industry for decades. Microsoft‚Äôs diverse product portfolio, strong financial performance, and strategic initiatives make it an interesting company to analyze from an investment perspective.</p><span id="more"></span><h2 id="üìä-Financial-Performance-Analysis"><strong>üìä Financial Performance Analysis</strong></h2><h2 id="1-Revenue-Growth">1. Revenue Growth:</h2><ul><li>Historical Growth: Microsoft has shown consistent revenue growth over the past decade. For example, from FY 2018 to FY 2023, revenue grew from $110 billion to $204 billion. <a href="https://www.microsoft.com/investor/reports/ar23/index.html">Microsoft annual reports</a></li><li>Segment Performance: Key segments like Intelligent CLoud (Azure) and Productivity and Business Processess (Office 365, Linkedin) have been major contributors. Azure has been a standout performer, experiencing annual growth rates of 40-50% in recent years. Office 365 continued subscription growth, particularly among enterprise users.</li></ul><h2 id="2-Profit-Margins">2. Profit Margins:</h2><ul><li>Gross Margin: Microsoft consistently maintains a high gross margin, around 68-70%, indicating strong pricing power and cost efficiency. <a href="https://www.microsoft.com/investor/reports/ar23/index.html">Microsoft Financial Performance</a></li><li>Operating Margin: Operating margins have been improving, reaching around 41% in FY 2023, reflecting operational efficiencies and scale benefits.</li><li>Net Margin: Net profit margins are also robust, typically in the range of 30-35%, showcasing the company‚Äôs ability to convert revenue into profit effectively.</li></ul><h2 id="3-Cash-Flow">3. Cash Flow:</h2><ul><li>Operating Cash Flow: Microsoft generates substantial operating cash flow, which was $87.6 billion in FY 2023, providing flexibility for reinvestment, acquisitions, and shareholder returns. <a href="https://www.microsoft.com/investor/reports/ar23/index.html">Microsoft Cash Flow Statments</a></li><li>Free Cash Flow: After capital expenditures, free cash flow remians strong, supporting dividens and share buybacks. For instance, free cash flow was around $65 billion in FY 2023.</li></ul><h2 id="4-Debt-and-Liquidity">4. Debt and Liquidity:</h2><ul><li>Debt Levels: Microsoft has a relative low debt-to-equity ratio, with long-term debt around $50 billion against a market cap exceeding $2.7 trillion, indicating a conservative leverage approach.</li><li>Liquidity: The company holds significant cash reserves, over $100 billion, providing a cushion against economic downturns and funding for strategic initiatives.</li></ul><h2 id="5-Shareholder-Returns">5. Shareholder Returns:</h2><ul><li>Dividends: Microsoft has a consistent track record of paying and increasing dividens, with a current yield of apporximately 1%, and a payout ratio around 30%-35%, suggesting room for further increases. <a href="https://www.microsoft.com/investor/reports/ar23/index.html">Microsoft Dividend Information</a></li><li>Share Buybacks: The company actively repurchases shares, returning additional capital to shareholders and supporting share price appreciation.</li></ul><h2 id="Conclusion">Conclusion:</h2><p>Microsoft‚Äôs financial performance is a strong argument for investment. The company demonstrates consistent revenue and profit growth, strong cash flow generation, prudent debt management, and shareholder-friendly practices. These factor collectively suggest a robust financial foundation and potential for sustained performance, making it an attractive option for long-term investors.</p><h2 id="üîÑ-Business-Model-and-Diversification-Analysis"><strong>üîÑ Business Model and Diversification Analysis</strong></h2><h2 id="1-Core-Business-Segments">1. Core Business Segments:</h2><ul><li><strong>Productivity and Business Processes:</strong> Includes Office 365, LinkedIn, and Dynamics 365, catering to enterprise productivity and collaboration needs.<ul><li>Office 365: Subscription-based productivity suite with a alrge suer base in both consumer and enterprise markets. The shift to a cloud subscription model has driven steady revenue growth.</li><li>LinkedIn: Generates revenue from talent solutions, marketing solutions, and premium subscriptions. LinkedIn has shown strong performance with increasing engagement and monetization.</li><li>Dynamics: Cloud-based business solutions for enterprise resource planning (ERP) and customer relationship management (CRM). It competes with products like Salesforce and SAP.</li></ul></li><li>Intelligent Cloud: Azure cloud services, server products, and enterprise services, driving digital transformation and cloud adoption.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Stocks </tag>
            
            <tag> Microsoft </tag>
            
            <tag> MSFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-Infrastructure-04-CDN and Networking</title>
      <link href="/2024/06/30/Inomad%20Dairy/04-Infrastructure-04-CDN%20and%20Networking.html"/>
      <url>/2024/06/30/Inomad%20Dairy/04-Infrastructure-04-CDN%20and%20Networking.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will explore Content Delivery Networks (CDNs) and networking technologies that play a crucial role in delivering content efficiently and securely over the internet. CDNs and networking solutions are essential components of modern cloud infrastructure, enabling fast and reliable access to web applications and services.</p><span id="more"></span><p>Content Delivery and Networking technologies play a critical role in ensuring that content and applications are delivered to users efficiently, reliably, and with low latency. These technologies encompass various services and solutions that optimize the delivery and performance of content and applications across the globe.</p><h2 id="üåê-Content-Delivery-Networks-CDNs"><strong>üåê Content Delivery Networks (CDNs)</strong></h2><ul><li>Definition: A CDN is a distributed network of servers strategically placed around the globe to deliver content to users more quickly and reliably by caching content closer to the end-users.</li></ul><h2 id="Key-Features-of-CDNs">Key Features of CDNs:</h2><ul><li>Caching: Stores copies of content in multiple locations to reduce latency and improve load times.</li><li>Load Balancing: Distributes traffic across multiple servers to avoid overloading a single server.</li><li>Security: Provides DDoS protection, secure socket layer (SSL) encryption, and other security measures.</li><li>Content Optimization: Compresses and optimizes content for faster delivery and better performance.</li><li>Edge Computing: Enables processing and computation closer to the end-users for reduced latency.</li></ul><h2 id="Use-Cases-of-CDNs">Use Cases of CDNs:</h2><ul><li>Accelerating website performance and load times.</li><li>Streaming high-quality video content.</li><li>Distributing software updates and patches.</li><li>Protecting against DDoS attacks and other security threats.</li></ul><h2 id="üîó-Cloud-based-Networking-Technologies"><strong>üîó Cloud-based Networking Technologies</strong></h2><ul><li>Definition: Cloud-based networking involves using cloud resources to manage, monitor, and control network traffic and services.</li></ul><p>Key Features of Cloud-based Networking:</p><h2 id="Virtual-Private-Cloud-VPC">Virtual Private Cloud (VPC)</h2><ul><li>Definition: A VPC is a private network within a cloud environment that allows users to define their own virtual network topology, including IP addresses, subnets, and routing tables.</li><li>Features:</li></ul><h3 id="1-Subnets-Divides-the-VPC-into-smaller-networks-for-better-organization-and-security">1. Subnets: Divides the VPC into smaller networks for better organization and security.</h3><h3 id="2-Route-Tables-Customizable-routing-to-control-traffic-flow-within-the-VPC-and-between-the-VPC-and-external-networks">2. Route Tables: Customizable routing to control traffic flow within the VPC and between the VPC and external networks.</h3><h3 id="3-Network-Access-Control-Lists-NACLs-Stateful-and-stateless-filtering-of-incoming-and-outgoing-traffic">3. Network Access Control Lists (NACLs): Stateful and stateless filtering of incoming and outgoing traffic.</h3><h3 id="4-Internet-Gateways-Enables-communication-between-the-VPC-and-the-internet">4. Internet Gateways: Enables communication between the VPC and the internet.</h3><h3 id="5-NAT-Gateways-Allows-instances-in-private-subnets-to-access-the-internet-while-remaining-private">5. NAT Gateways: Allows instances in private subnets to access the internet while remaining private.</h3><h2 id="Software-Defined-Networking-SDN">Software-Defined Networking (SDN)</h2><ul><li>Definition: SDN is an approach to networking that separates the control plane from the data plane, allowing network administrators to programmatically control network behavior through software applications.</li><li>Features:</li></ul><h3 id="1-Centralized-Control-Unified-management-console-for-configuring-and-managing-network-devices-and-services">1. Centralized Control: Unified management console for configuring and managing network devices and services.</h3><h3 id="2-Programmability-APIs-for-automating-network-configuration-and-management">2. Programmability: APIs for automating network configuration and management.</h3><h3 id="3-Dynamic-Routing-Real-time-traffic-management-and-path-optimization-based-on-network-conditions">3. Dynamic Routing: Real-time traffic management and path optimization based on network conditions.</h3><h3 id="4-Policy-Based-Security-Granular-control-over-network-access-and-security-policies">4. Policy-Based Security: Granular control over network access and security policies.</h3><h2 id="Elastic-Load-Balancing-ELB">Elastic Load Balancing (ELB)</h2><ul><li>Definition: ELB automatically distributes incoming application traffic across multiple targets, such as EC2 instances, containers, and IP addresses, to ensure optimal performance and availability.</li><li>Features:</li></ul><h3 id="1-Automatic-Scaling-Adjusts-capacity-to-handle-varying-traffic-levels">1. Automatic Scaling: Adjusts capacity to handle varying traffic levels.</h3><h3 id="2-Health-Checks-Monitors-the-health-of-registered-targets-and-routes-traffic-only-to-healthy-instances">2. Health Checks: Monitors the health of registered targets and routes traffic only to healthy instances.</h3><h3 id="3-Types-of-Load-Balancers-Includes-application-network-and-classic-load-balancers-tailored-for-different-use-cases">3. Types of Load Balancers: Includes application, network, and classic load balancers tailored for different use cases.</h3><h3 id="4-Cross-Zone-Load-Balancing-Distributes-traffic-evenly-across-multiple-availability-zones-for-high-availability">4. Cross-Zone Load Balancing: Distributes traffic evenly across multiple availability zones for high availability.</h3><h2 id="Global-Networking-and-Interconnectivity">Global Networking and Interconnectivity</h2><ul><li>Definition: Cloud providers offer global networking services that enable organizations to connect their on-premises data centers to cloud resources and establish secure, high-speed connections between different regions.</li><li>Features:</li></ul><h3 id="1-Private-Connectivity-Direct-connections-between-on-premises-networks-and-cloud-resources-without-traversing-the-public-internet">1. Private Connectivity: Direct connections between on-premises networks and cloud resources without traversing the public internet.</h3><h3 id="2-Global-Accelerator-Usesthe-global-network-of-a-cloud-provider-to-optimize-routing-and-improve-performance-for-internet-facing-applications">2. Global Accelerator: Usesthe global network of a cloud provider to optimize routing and improve performance for internet-facing applications.</h3><h3 id="3-Anycast-IP-Routes-user-requests-to-the-nearest-edge-location-for-reduced-latency-and-improved-performance">3. Anycast IP: Routes user requests to the nearest edge location for reduced latency and improved performance.</h3><h2 id="Network-Security">Network Security</h2><ul><li>Definition: Cloud-based networking solutions provide comprehensive security measures integrated into the cloud network infrastructure to protect against cyber threats and unauthorized access.</li><li>Features:</li></ul><h3 id="1-DDoS-Protection-Automated-defense-against-Distributed-Denial-of-Service-attacks">1. DDoS Protection: Automated defense against Distributed Denial of Service attacks.</h3><h3 id="2-Firewall-as-a-Service-FWaaS-Cloud-based-firewalls-that-protect-network-traffic">2. Firewall as a Service(FWaaS): Cloud-based firewalls that protect network traffic.</h3><h3 id="3-Encryption-Data-encryption-at-rest-and-in-transit-to-ensure-data-confidentiality">3. Encryption: Data encryption at rest and in transit to ensure data confidentiality.</h3><h3 id="4-Identity-and-Access-Management-IAM-Role-based-access-control-and-multi-factor-authentication-for-secure-network-access">4. Identity and Access Management(IAM): Role-based access control and multi-factor authentication for secure network access.</h3><h2 id="Edge-Computing">Edge Computing</h2><ul><li>Definition: Edge computing brings computation and data storage closer to the location where it is needed, reducing latency and improving performance for applications that require real-time processing.</li><li>Features:</li></ul><h3 id="1-Edge-Nodes-Locatoins-that-cache-content-and-provide-compute-power-closer-to-users">1. Edge Nodes: Locatoins that cache content and provide compute power closer to users.</h3><h3 id="2-Latency-Reduction-Processes-data-at-edge-locaitons-to-minimize-round-trip-time">2. Latency Reduction: Processes data at edge locaitons to minimize round-trip time.</h3><h3 id="3-Real-Time-Data-Processing-Enables-real-time-analytics-and-decision-making-at-the-edge">3. Real-Time Data Processing: Enables real-time analytics and decision-making at the edge.</h3><h2 id="Automation-and-Orchestration">Automation and Orchestration</h2><ul><li>Definition: Cloud-native automation and orchestration tools and APIs can automate the deployment, management, and operation of network resources, reducing manual intervention and improving efficiency.</li><li>Features:</li></ul><h3 id="1-Infrastructure-as-Code-IaC-Use-of-scripts-and-templates-to-provision-and-manage-network-infrastructure">1. Infrastructure as Code (IaC): Use of scripts and templates to provision and manage network infrastructure.</h3><h3 id="2-Auto-Scaling-Automatically-adjusts-network-resources-based-on-demand">2. Auto-Scaling: Automatically adjusts network resources based on demand.</h3><h3 id="3-Monitoring-and-Logging-Continuous-monitoring-and-logging-of-network-performance-and-events-for-troubleshooting-and-optimization">3. Monitoring and Logging: Continuous monitoring and logging of network performance and events for troubleshooting and optimization.</h3><h3 id="4-Self-Healing-Automated-detection-and-remediation-of-network-issues-without-human-intervention">4. Self-Healing: Automated detection and remediation of network issues without human intervention.</h3><h2 id="Service-Level-Agreements-SLAs">Service Level Agreements (SLAs)</h2><ul><li>Definition: Cloud providers offer SLAs that define the level of service, performance, and availability guarantees for network services, ensuring reliability and accountability.</li><li>Features:</li></ul><h3 id="1-Uptime-Guarantees-Commitments-to-network-availability-and-performance">1. Uptime Guarantees: Commitments to network availability and performance.</h3><h3 id="Performance-Metrics-Defined-benchmarks-for-network-latency-throughput-and-response-times">Performance Metrics: Defined benchmarks for network latency, throughput, and response times.</h3><h3 id="3-Compensation-Details-of-compensation-for-service-downtime-or-performance-issues">3. Compensation: Details of compensation for service downtime or performance issues.</h3><h2 id="üöÄ-Benefits-of-Cloud-based-Networking"><strong>üöÄ Benefits of Cloud-based Networking:</strong></h2><ul><li>Flexibility: Rapid deployment and scaling of network resources.</li><li>Security: Enhanced security features and encryption for data in transit.</li><li>Cost-Efficiency: Pay-as-you-go pricing models and reduced hardware costs.</li><li>Automation: Automated provisioning, monitoring, and management of network resources.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Cloud Computing </tag>
            
            <tag> CDN </tag>
            
            <tag> Networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-02-Stocks-01-1st Month Summary</title>
      <link href="/2024/06/15/Investment/02-Stocks-01-1st%20Month%20Summary.html"/>
      <url>/2024/06/15/Investment/02-Stocks-01-1st%20Month%20Summary.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I‚Äôll summarize the key points from my first month of investing in stocks with GPT. It‚Äôs been an interesting journey so far trying out investing with GPT as a new investing learner.</p><span id="more"></span><p>First, I‚Äôm an aboslutely greenhorn in investment. With the power of GPT, I think it would be fun and educational to do an experienment investing with it, learning with it. I‚Äôll only share some key findings in this post, the stocks I‚Äôve invested in, and the overall performance of my portfolio. Regarding the detailed usage of GPT and the analysis of each company, I‚Äôll cover them in separate posts in the future while I keep learning.</p><h2 id="üìà-Portfolio-Performance"><strong>üìà Portfolio Performance</strong></h2><p>I started investing in individual stocks from 14th of May this year on a quite popular platform Trading212 which is an easy-to-use, 0 commision fee platform. For now there is no need to compare different platforms, let‚Äôs go back to the main point. During the first month I have invested in the following companies so far with the percentage of the total portfolio:</p><ul><li>Microsoft (MSFT): 19.91%</li><li>Nvidia (NVDA): 18.77%</li><li>Amazon (AMZN): 13.62%</li><li>Barclays (BARC): 10.53%</li><li>Alphabet Class A (GOOGL): 8.34%</li><li>CrowdStrike (CRWD): 7.49%</li><li>Mastercard (MA): 6.61%</li><li>Costco Wholesale (COST): 6.29%</li><li>Broadcom (AVGO): 6.05%</li><li>Vistra Corp (VST): 2.39%</li></ul><p>So far, the total return of the portfolio is 6.05%, meanwhile the S&amp;P 500 index has returned 2.33% in the same period. At the time when I was typing, another ETF hit me and I had a quick look which is Invesco QQQ, with the return at 5.80% (With the currently limited knowledge I think it‚Äôs a good index to follow together with S&amp;P 500). The portfolio has outperformed them 3.72% and 0.25% respectively in the first month.</p><p>The gain and loss of each stock in the portfolio are as follows:</p><ul><li>Microsoft (MSFT): +5.68%</li><li>Nvidia (NVDA): +23.01%</li><li>Amazon (AMZN): +0.05%</li><li>Barclays (BARC): -6.94%</li><li>Alphabet Class A (GOOGL): +2.44%</li><li>CrowdStrike (CRWD): +8.88%</li><li>Mastercard (MA): -1.41%</li><li>Costco Wholesale (COST): +3.10%</li><li>Broadcom (AVGO): +24.94%</li><li>Vistra Corp (VST): -11.80%</li></ul><h2 id="üõí-Buying-Strategy"><strong>üõí Buying Strategy</strong></h2><p>As a salaried average person, I‚Äôve decided to go with the most reliable method:a long-term investment strategy. I‚Äôve invested in companies that I believe have strong fundamentals and growth potential in the future (Of course AI AI and AI for most of them). So the buying strategy is quite simple: buy and hold with bi-weekly top up.</p><h2 id="üìä-End-of-Period-Adjustments"><strong>üìä End of Period Adjustments</strong></h2><p>For now I will hold all the companies I‚Äôve invested in. Based on my current ability, I‚Äôve adjusted the percentage of each company in the portfolio to keep the portfolio balanced. Of course with the learning journey continues, I will continue to monitor the performance of each company and make adjustments if necessary.</p><ul><li>Microsoft (MSFT): 17%</li><li>Nvidia (NVDA): 14%</li><li>Amazon (AMZN): 12%</li><li>Alphabet Class A (GOOGL): 12%</li><li>CrowdStrike (CRWD): 11%</li><li>Broadcom (AVGO): 11%</li><li>Costco Wholesale (COST): 10%</li><li>Mastercard (MA): 7%</li><li>Barclays (BARC): 5%</li><li>Vistra Corp (VST): 1%</li></ul><h2 id="üìù-Next-Steps"><strong>üìù Next Steps</strong></h2><p>Learn, learn and learn. I think there are couple of things I need to learn more about:</p><ul><li>How to pick up the right companies to invest in</li><li>How to analyze the financial status of a company</li><li>How to manage and monitor the portfolio to help make adjustments if necessary</li><li>To help achive the above all, learn how to use GPT to help me with the analysis and make better decisions</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Stocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-Infrastructure-03-Storage Technologies in Cloud</title>
      <link href="/2024/05/29/Inomad%20Dairy/04-Infrastructure-03-Storage%20Technologies%20in%20Cloud.html"/>
      <url>/2024/05/29/Inomad%20Dairy/04-Infrastructure-03-Storage%20Technologies%20in%20Cloud.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will explore the key storage technologies that underpin cloud computing. Storage is a critical component of any cloud infrastructure, enabling data persistence, retrieval, and management for applications and services.</p><span id="more"></span><p>Cloud storage technologies enable the storage, management, and retrieval of data in a scalable, flexible, and cost-effective manner. Here are the key types of cloud storage technologies:</p><h2 id="üîß-Key-Storage-Technologies-in-Cloud-Computing"><strong>üîß Key Storage Technologies in Cloud Computing</strong></h2><h2 id="1-Object-Storage">1. Object Storage</h2><ul><li>Definition: Object storage manages data as objects, each containing the data itself, metadata, and a unique identifier.</li><li>Key Features: Scalability, durability, metadata management, cost-effectiveness.</li><li>Use Cases: Storing unstructured data, media files, backups, archives.</li></ul><h2 id="2-Block-Storage">2. Block Storage</h2><ul><li>Definition: Block storage divides data into fixed-sized blocks and stores them as separate pieces, each with its own address but without metadata.</li><li>Key Features: High performance, low latency, data consistency.</li></ul><h2 id="3-File-Storage">3. File Storage</h2><ul><li>Definition: File storage organizes data into a hierarchical structure of files and folders, similar to how data is stored on local file systems.</li><li>Key Features: Shared access, file-level operations, compatibility with existing applications.</li></ul><h2 id="4-Cloud-Database-Storage">4. Cloud Database Storage</h2><ul><li>Definition: Cloud databases provide scalable, high-performance storage for structured data, enabling efficient querying, indexing, and transaction processing.</li><li>Key Features: ACID compliance, scalability, fault tolerance.</li></ul><h2 id="5-Hybrid-Storage-Solutions">5. Hybrid Storage Solutions</h2><ul><li>Definition: Hybrid cloud storage combines on-premises storage with cloud storage services, allowing organizations to leverage the benefits of both environments.</li><li>Key Features: Flexibility, cost management, and data locality for performance-sensitive applications.</li></ul><h2 id="üö©-Considerations-for-Choosing-Storage-Technologies"><strong>üö© Considerations for Choosing Storage Technologies</strong></h2><h2 id="1-Performance-Requirements">1. Performance Requirements</h2><ul><li>Consider the performance characteristics required by your applications, such as throughput, latency, and IOPS.</li></ul><h2 id="2-Scalability-and-Elasticity">2. Scalability and Elasticity</h2><ul><li>Evaluate the scalability and elasticity of storage solutions to accommodate growing data volumes and changing workloads.</li></ul><h2 id="3-Durability-and-Reliability">3. Durability and Reliability</h2><ul><li>Assess the durability and reliability of storage technologies to ensure data integrity and availability.</li></ul><h2 id="4-Cost-Efficiency">4. Cost Efficiency</h2><ul><li>Compare the cost structures of different storage options, including storage capacity, data transfer, and access fees.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Cloud Computing </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-Infrastructure-02-Technologies in Cloud Computing</title>
      <link href="/2024/05/29/Inomad%20Dairy/04-Infrastructure-02-Technologies%20in%20Cloud%20Computing.html"/>
      <url>/2024/05/29/Inomad%20Dairy/04-Infrastructure-02-Technologies%20in%20Cloud%20Computing.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will delve into the key infrastructure technologies that underpin cloud computing. Understanding these technologies is essential for building scalable, reliable, and secure cloud-based applications.</p><span id="more"></span><h2 id="üîß-Key-Infrastructure-Technologies-in-Cloud-Computing"><strong>üîß Key Infrastructure Technologies in Cloud Computing</strong></h2><h2 id="1-Virtualization">1. Virtualization</h2><ul><li>Definition: Virtualization technology allows for the creation of multiple virtual environments from a single physical hardware system, enabling better utilization of resources and isolation between different environments.</li></ul><p>Types of Virtualization:</p><ul><li>Server Virtualization: Divides a physical server into multiple virtual servers, each running its own operating system and applications.</li><li>Storage Virtualization: Pools physical storage from multiple devices into a single logical storage unit.</li><li>Network Virtualization: Combines hardware and software network resources and network functionality into a single, software-based administrative entity.</li></ul><h2 id="2-Containers">2. Containers</h2><ul><li>Definition: Containers are lightweight, standalone, executable packages that contain everything needed to run an application, including code, runtime, system tools, libraries, and settings. They provide a consistent environment for applications to run across different computing environments.</li></ul><h2 id="3-Microservices-Architecture">3. Microservices Architecture</h2><ul><li>Definition: Microservices architecture is an architectural style that structures an application as a collection of small, loosely coupled services. Each service is independently deployable, scalable, and maintainable, implementing a specific business capability.</li><li>Benifits: Scalability, resilience, flexibility, and ease of deployment.</li></ul><h2 id="4-Serverless-Computing">4. Serverless Computing</h2><ul><li>Definition: Serverless computing allows developers to build and run applications without managing servers. The cloud provider automatically provisions, scales, and manages the infrastructure required to run the code.</li></ul><h2 id="5-DevOps-and-Automation-Tools">5. DevOps and Automation Tools</h2><ul><li>Definition: Tools and practices that combine software development (Dev) and IT operations (Ops) to shorten the systems development life cycle and provide continuous delivery with high software quality.</li></ul><h2 id="6-Networking-and-Content-Devliery">6. Networking and Content Devliery</h2><ul><li>Definition: Technologies that manage network infrastructure, traffic distribution, and deliver content globally with low latency and high transfer speeds.</li></ul><h2 id="7-Security-and-identity-Management">7. Security and identity Management</h2><ul><li>Definition: Technologies and practices that protect cloud infrastructure, applications, and data, and manage user identities and access rights.</li></ul><h2 id="8-Monitoring-and-Logging">8. Monitoring and Logging</h2><ul><li>Definition: Tools that monitor cloud resources, track performance metrics, and log events for troubleshooting, performance optimization, and compliance.</li></ul><h2 id="9-Data-Management-and-Analytics">9. Data Management and Analytics</h2><ul><li>Definition: Technologies that store, process, and analyze large volumes of data to extract meaningful insights and support decision-making.</li></ul><p>In the upcoming posts, I will explore each of these infrastructure technologies in more detail.üåû</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Cloud Computing Technologies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-04-Infrastructure-01-Foundations of Cloud Computing</title>
      <link href="/2024/05/27/Inomad%20Dairy/04-Infrastructure-01-Foundations%20of%20Cloud%20Computing.html"/>
      <url>/2024/05/27/Inomad%20Dairy/04-Infrastructure-01-Foundations%20of%20Cloud%20Computing.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>From this post onwards, I will start exploring the related knowledge of infrastructure for software applications, particularly in the cloud. This post will cover the basics of cloud computing.</p><span id="more"></span><h2 id="‚òÅÔ∏è-Core-Foundations-of-Cloud-Computing"><strong>‚òÅÔ∏è Core Foundations of Cloud Computing</strong></h2><p>Cloud computing is a technology paradigm that allows users to access and store data and applications on remote servers over the internet rather than on local servers or personal computers. This model offers flexibility, scalability, and cost efficiency. Here are the core foundations of cloud computing:</p><h2 id="1-On-Demand-Self-Service">1. On-Demand Self-Service</h2><ul><li>Definition: Users can provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with each service provider.</li><li>Key Features: Web-based interfaces, automation tools, API access.</li></ul><h2 id="2-Broad-Network-Access">2. Broad Network Access</h2><ul><li>Definition: Cloud services are available over the network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, tablets, laptops, and workstations).</li><li>Key Features: Accessibility from any device, anywhere.</li></ul><h2 id="3-Resource-Pooling">3. Resource Pooling</h2><ul><li>Definition: The provider‚Äôs computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand.</li><li>Key Features: Location independence, resource sharing, virtualization.</li></ul><h2 id="4-Rapid-Elasticity">4. Rapid Elasticity</h2><ul><li>Definition: Capabilities can be elastically provisioned and released to scale rapidly outward and inward with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time.</li><li>Key Features: Scalability, flexibility, auto-scaling.</li></ul><h2 id="5-Measured-Service">5. Measured Service</h2><ul><li>Definition: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</li><li>Key Features: Pay-per-use, metered service, resource monitoring, billing.</li></ul><p>These core foundations are the building blocks of cloud computing that enable businesses to scale and grow without the need for significant capital investment in infrastructure. Next, I will explore the cloud service models and deployment models.</p><h2 id="üß©-Cloud-Service-Model"><strong>üß© Cloud Service Model</strong></h2><p>Cloud computing services are typically categorized into three service models based on the level of abstraction and control they provide to users. These models are Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS).</p><h2 id="Infrastructure-as-a-Service-IaaS">Infrastructure as a Service (IaaS)</h2><ul><li>Definition: Provides virtualized computing resources over the internet. It offers fundamental computing resources such as virtual machines, storage, and networks.</li><li>Examples: Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP).</li><li>Use Cases: Hosting websites, running enterprise applications, backup and disaster recovery.</li></ul><h2 id="Platform-as-a-Service-PaaS">Platform as a Service (PaaS)</h2><ul><li>Definition: Provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure.</li><li>Examples: Heroku, Google App Engine, Microsoft Azure App Service.</li><li>Use Cases: Web application development, mobile application development, API development.</li></ul><h2 id="Software-as-a-Service-SaaS">Software as a Service (SaaS)</h2><ul><li>Definition: Delivers software applications over the internet, on a subscription basis, eliminating the need for organizations to install and run applications on their own computers or data centers.</li><li>Examples: Salesforce, Google Workspace, Microsoft Office 365.</li><li>Use Cases: CRM, email services, collaboration tools.</li></ul><h2 id="üöÄ-Cloud-Deployment-Models"><strong>üöÄ Cloud Deployment Models</strong></h2><p>Cloud deployment models define the type of cloud environment based on ownership, size, and access. The common deployment models are Public Cloud, Private Cloud, Hybrid Cloud, and Community Cloud.</p><h2 id="Public-Cloud">Public Cloud</h2><ul><li>Definition: Services are delivered over the public internet and shared across multiple organizations.</li><li>Benefits: Cost-effective, scalable, no maintenance overhead.</li><li>Examples: AWS, Azure, GCP.</li></ul><h2 id="Private-Cloud">Private Cloud</h2><ul><li>Definition: Services are maintained on a private network for a single organization, providing greater control and security.</li><li>Benefits: Enhanced security, compliance, customizable.</li><li>Examples: VMware vSphere, OpenStack.</li></ul><h2 id="Hybrid-Cloud">Hybrid Cloud</h2><ul><li>Definition: Combines public and private clouds, allowing data and applications to be shared between them.</li><li>Benefits: Flexibility, cost-efficiency, improved security.</li><li>Examples: Microsoft Azure Stack, AWS Outposts.</li></ul><h2 id="Community-Cloud">Community Cloud</h2><ul><li>Definition: A collaborative effort in which infrastructure is shared between several organizations from a specific community with common concerns (e.g., security, compliance).</li><li>Benefits: Cost-sharing, improved collaboration.</li><li>Examples: Government cloud services.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Cloud Computing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-01-Investing or Mortgage-02-A Combined Approach</title>
      <link href="/2024/05/21/Investment/01-Investing%20or%20Mortgage-02-A%20Combined%20Approach.html"/>
      <url>/2024/05/21/Investment/01-Investing%20or%20Mortgage-02-A%20Combined%20Approach.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In the last post, I quickly compared the outcomes of investing in the stock market or paying off the mortgage early over a 2-year and 5-year period. In this post, I‚Äôll explore the option of investing in stocks and paying off the mortage simultaneously, and see how the numbers stack up for 2-year period.</p><span id="more"></span><h2 id="Assumptions"><strong>Assumptions</strong></h2><ul><li>Monthly Cash Available: ¬£2,000</li><li>Monthly Mortgage Payment: ¬£2,000</li><li>Mortgage Interest Rate: 5.8%</li><li>Investment Return Rate: 7% - 10% per year (In this case we will use midpoint 8.5% for illustration)</li><li>Investment Period: 2 years and 5 years</li><li>Remaining Mortgage Amount (Principal): ¬£111,000</li><li>Maximum Early Repayment without Penalty per year: ¬£11,000</li></ul><p>We‚Äôll use two scenarios this time to do our analysis:</p><h2 id="Scenario-1-Invest-in-stocks-with-¬£2-000-monthly-and-withdraw-¬£11-000-towards-the-mortgage-at-the-end-of-year"><strong>Scenario 1: Invest in stocks with ¬£2,000 monthly and withdraw ¬£11,000 towards the mortgage at the end of year.</strong></h2><h3 id="Investment-Growth"><strong>Investment Growth:</strong></h3><ul><li>Year 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£24,000 * 1.085 - ¬£11,000 &#x3D; ¬£15,040<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Year 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£15,040 * (1 + 0.085&#x2F;12)**12 + ¬£2,000 * ((1 + 0.085&#x2F;12)**12 - 1)&#x2F;(0.085&#x2F;12) - ¬£11,000 &amp;approx ¬£30,139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Mortgage-Reduction"><strong>Mortgage Reduction:</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly interest rate: 5.8%&#x2F;12 &#x3D; 0.0048333Year 1:Month 1: Principal &#x3D; ¬£111,000Interest &#x3D; ¬£111,000 * 0.0048333 &#x3D; ¬£536.99Payment &#x3D; ¬£2,000Principal Reduction &#x3D; ¬£2,000 ‚àí ¬£536.99 &#x3D; ¬£1,463.01New Principal &#x3D; ¬£111,000 ‚àí ¬£1,463.01 &#x3D; ¬£109,536.99‚Äã&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Continue this calculation for 24 months to get the peirod-end principal.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Function to calculate the amortization schedule and interest savings</span><span class="token keyword">def</span> <span class="token function">calculate_amortization_schedule</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> monthly_payment<span class="token punctuation">,</span> extra_annual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> extra_monthly<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    monthly_rate <span class="token operator">=</span> rate <span class="token operator">/</span> <span class="token number">12</span> <span class="token operator">/</span> <span class="token number">100</span>    schedule <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    total_interest_paid <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> month <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 2 years = 24 months</span>        interest <span class="token operator">=</span> principal <span class="token operator">*</span> monthly_rate        principal_reduction <span class="token operator">=</span> monthly_payment <span class="token operator">-</span> interest        total_payment <span class="token operator">=</span> monthly_payment        <span class="token keyword">if</span> extra_monthly <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            total_payment <span class="token operator">+=</span> extra_monthly            principal_reduction <span class="token operator">+=</span> extra_monthly        principal <span class="token operator">-=</span> principal_reduction        total_interest_paid <span class="token operator">+=</span> interest        schedule<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> total_payment<span class="token punctuation">,</span> interest<span class="token punctuation">,</span> principal_reduction<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> month <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> extra_annual <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            principal <span class="token operator">-=</span> extra_annual    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>schedule<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token string">'Total Payment'</span><span class="token punctuation">,</span> <span class="token string">'Interest'</span><span class="token punctuation">,</span> <span class="token string">'Principal Reduction'</span><span class="token punctuation">,</span> <span class="token string">'Remaining Principal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_interest_paid<span class="token comment"># Scenario 1: $2,000 monthly, $11,000 annual extra payment</span>principal_1 <span class="token operator">=</span> <span class="token number">111000</span>monthly_payment_1 <span class="token operator">=</span> <span class="token number">2000</span>extra_annual_1 <span class="token operator">=</span> <span class="token number">11000</span>schedule_1<span class="token punctuation">,</span> total_interest_1 <span class="token operator">=</span> calculate_amortization_schedule<span class="token punctuation">(</span>principal_1<span class="token punctuation">,</span> <span class="token number">5.8</span><span class="token punctuation">,</span> monthly_payment_1<span class="token punctuation">,</span> extra_annual_1<span class="token punctuation">)</span><span class="token comment"># Scenario 2: $2,000 monthly, $900 monthly extra payment</span>principal_2 <span class="token operator">=</span> <span class="token number">111000</span>monthly_payment_2 <span class="token operator">=</span> <span class="token number">2000</span>extra_monthly_2 <span class="token operator">=</span> <span class="token number">900</span>schedule_2<span class="token punctuation">,</span> total_interest_2 <span class="token operator">=</span> calculate_amortization_schedule<span class="token punctuation">(</span>principal_2<span class="token punctuation">,</span> <span class="token number">5.8</span><span class="token punctuation">,</span> monthly_payment_2<span class="token punctuation">,</span> extra_monthly<span class="token operator">=</span>extra_monthly_2<span class="token punctuation">)</span><span class="token keyword">import</span> ace_tools <span class="token keyword">as</span> tools<span class="token punctuation">;</span> tools<span class="token punctuation">.</span>display_dataframe_to_user<span class="token punctuation">(</span><span class="token string">"Scenario 1 Amortization Schedule"</span><span class="token punctuation">,</span> schedule_1<span class="token punctuation">)</span><span class="token keyword">import</span> ace_tools <span class="token keyword">as</span> tools<span class="token punctuation">;</span> tools<span class="token punctuation">.</span>display_dataframe_to_user<span class="token punctuation">(</span><span class="token string">"Scenario 2 Amortization Schedule"</span><span class="token punctuation">,</span> schedule_2<span class="token punctuation">)</span>total_interest_1<span class="token punctuation">,</span> total_interest_2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Total interest paid over 2 years: $10,197.47</p><h2 id="Scenario-2-Invest-in-stocks-with-¬£1-100-monthly-and-use-¬£900-towards-the-mortgage-at-each-month"><strong>Scenario 2: Invest in stocks with ¬£1,100 monthly and use ¬£900 towards the mortgage at each month.</strong></h2><h3 id="Investment-Growth-2"><strong>Investment Growth:</strong></h3><ul><li>Year 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£1,100 * ((1 + 0.085&#x2F;12)**24 - 1)&#x2F;(0.085&#x2F;12) &amp;approx ¬£27,480<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‚Äã</p><h3 id="Mortgage-Reduction-2"><strong>Mortgage Reduction:</strong></h3><pre class="line-numbers language-none"><code class="language-none">Month 1:Principal &#x3D; ¬£111,000Interest &#x3D; ¬£111,000√ó0.0048333 &#x3D; ¬£536.99Payment &#x3D; ¬£2,000 + ¬£900 ‚àí ¬£536.99 &#x3D; ¬£2,363.01New Principal &#x3D; ¬£111,000 ‚àí ¬£2,363.01 &#x3D; ¬£108,636.99‚Äã&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Continue this calculation for 24 months to get the peirod-end principal using the same calculation as above.</p><p>Total interest paid over 2 years: $9,608.45</p><h2 id="Conclusion"><strong>Conclusion</strong></h2><h3 id="Scenario-1">**Scenario 1: **</h3><ul><li>Total interest paid over 2 years: ¬£10,197.47</li><li>Investment value after 2 years: ¬£30,139</li></ul><h3 id="Scenario-2"><strong>Scenario 2:</strong></h3><ul><li>Scenario 2: Total interest paid over 2 years: ¬£9,608.45</li><li>Investment value after 2 years: ¬£27,480</li></ul><p>In this case, the second scenario is better as it results in lower interest paid and a higher investment value after 2 years with the difference of ¬£589.02. However, the Investment value is still lower than the Scenario 1 due to the lower monthly investment amount with the difference of ¬£2,659.</p><p>So in summary, scenario 1 is gaining more in total at ¬£2,659 - ¬£589.02 = ¬£2069.98 in 2-year period.</p><h2 id="Intersting-Insights"><strong>Intersting Insights</strong></h2><p>Again this whole analysis was generated using GPT4o. Although the accuracy and the numbers are not 100% accurate, the insights are very interesting and the short of amount of time it took to generate this analysis is very impressive. This could be further developed to provide more accurate and detailed analysis for sure but more importantly, it can be used as a tool to generate ideas and insights for personal finance.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Mortgage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-01-Investing or Mortgage-01-Comparative Analysis</title>
      <link href="/2024/05/20/Investment/01-Investing%20or%20Mortgage-01-Comparative%20Analysis.html"/>
      <url>/2024/05/20/Investment/01-Investing%20or%20Mortgage-01-Comparative%20Analysis.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this blog post, I‚Äôll run a quick analysis on the common dilemma of whether to invest extra money or pay off your mortgage early. In the current high interest situtaion, this has become a question that stays in my mind.</p><span id="more"></span><p>When deciding whether to invest in the stock market or pay off your mortgage, it‚Äôs essential to weigh the potential returns against the guaranteed savings. Based on some current interest rates in UK and the annual stocks return rate of US market in recent years, let‚Äôs use some imaginary assumptions and break down the numbers for both options over a 2-year and 5-year period to quickly compare the outcomes.</p><h2 id="Assumptions"><strong>Assumptions</strong></h2><ul><li>Monthly Cash Available: ¬£2,000</li><li>Monthly Mortgage Payment: ¬£2,000</li><li>Mortgage Interest Rate: 5.8%</li><li>Investment Return Rate: 7% - 10% per year</li><li>Investment Period: 2 years and 5 years</li></ul><h2 id="Investing-in-Stocks"><strong>Investing in Stocks</strong></h2><h3 id="2-Year-Scenario"><strong>2-Year Scenario</strong></h3><p>Using the Future Value formula, we can calculate the future value of the investment after 2 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; P * (((1 + r&#x2F;n)**(n*t) - 1) &#x2F; (r&#x2F;n))FV &#x3D; ¬£2,000 * (((1 + 0.07&#x2F;12)**(12*2) - 1) &#x2F; (0.07&#x2F;12)) &amp;approx ¬£51,362FV &#x3D; ¬£2,000 * (((1 + 0.10&#x2F;12)**(12*2) - 1) &#x2F; (0.10&#x2F;12)) &amp;approx ¬£52,894<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Where:<br>P: Monthly investment amount<br>r: Annual interest rate (expressed as a decimal, e.g., 0.07 for 7%)<br>n: Number of compounding periods per year<br>t: Number of years</p><h3 id="5-Year-Scenario"><strong>5-Year Scenario</strong></h3><p>Similarly, we can calculate the future value of the investment after 5 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; ¬£2,000 * (((1 + 0.07&#x2F;12)**(12*5) - 1) &#x2F; (0.07&#x2F;12)) &amp;approx ¬£143,186FV &#x3D; ¬£2,000 * (((1 + 0.10&#x2F;12)**(12*5) - 1) &#x2F; (0.10&#x2F;12)) &amp;approx ¬£154,875<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Paying-off-Mortgage"><strong>Paying off Mortgage</strong></h2><h3 id="2-Year-Scenario-2"><strong>2-Year Scenario</strong></h3><p>Using the modified Future Value formula, we can calculate the mortgage reduction for the future value of an annuity due after 2 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; P * (((1 + r&#x2F;n)**(n*t) - 1) &#x2F; (r&#x2F;n)) * (1 + r&#x2F;n)FV &#x3D; ¬£2,000 * (((1 + 0.058&#x2F;12)**(12*2) - 1) &#x2F; (0.058&#x2F;12)) * (1 + 0.058&#x2F;12) &amp;approx ¬£51,617<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-Year-Scenario-2"><strong>5-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Similarly, we can calculate the mortgage reduction for the future value of an annuity due after 5 years:FV &#x3D; ¬£2,000 * (((1 + 0.058&#x2F;12)**(12*5) - 1) &#x2F; (0.058&#x2F;12)) * (1 + 0.058&#x2F;12) &amp;approx ¬£138,385<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Free-Cash-FLow-from-Paying-off-Mortgage"><strong>Free Cash FLow from Paying off Mortgage</strong></h2><p>After paying off the mortgage early, the extra cash flow would be substantial.</p><h3 id="2-Year-Scenario-3"><strong>2-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly Cash Flow: ¬£2000 * (1 + 0.058&#x2F;12)**(12*2) &#x2F; ((1 + 0.058&#x2F;12)**(12*2) - 1) &#x3D; ¬£2,200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Year-Scenario-3"><strong>5-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly Cash Flow: ¬£2000 * (1 + 0.058&#x2F;12)**(12*5) &#x2F; ((1 + 0.058&#x2F;12)**(12*5) - 1) &#x3D; ¬£2,500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>Based on the assumptions and calculations above, it‚Äôs clear that investing in the stock market can yield higher returns compared to paying off the mortgage early. However, the decision ultimately depends on the risk tolerance, financial goals, and personal circumstances. It‚Äôs essential to consider the opportunity cost of investing in the stock market versus the guaranteed savings from paying off the mortgage early.</p><p><strong>Investing in Stocks</strong>:</p><ul><li>2-Year Scenario Return: ¬£51,362 - ¬£52,894</li><li>5-Year Scenario Return: ¬£143,186 - ¬£154,875</li></ul><p><strong>Paying off Mortgage</strong>:</p><ul><li>2-Year Scenario Savings: ¬£51,617</li><li>5-Year Scenario Savings: ¬£138,385</li></ul><p><strong>Free Cash Flow from Paying off Mortgage</strong>:</p><ul><li>2-Year Scenario: ¬£2,200</li><li>5-Year Scenario: ¬£2,500</li></ul><h2 id="Conclusion"><strong>Conclusion</strong></h2><ul><li>For a 2-year horizon, investing in stocks might yield higher returns (7.0% to 10.19%) compared to the guaranteed savings from paying off the mortgage (7.53%), but comes with higher risk.</li><li>For a 5-year horizon, investing in stocks likely provides higher returns (19.32% to 29.06%) compared to paying off the mortgage (15.32%). However, the market risk remains.</li><li>Extra cash flow from paying off the mortgage early would significantly enhance your monthly savings once the mortgage is fully paid off.</li></ul><p>This analysis provides a clear comparison to help you decide based on your risk tolerance and preference for guaranteed savings versus potential higher returns.</p><h2 id="Interesting-Notes"><strong>Interesting Notes</strong></h2><p>The analysis above was fully generated by GPT4o model. I tried to validate the numbers, it appears that there are some margin of errors in the calculations around ¬£1,000 - ¬£2,000 each time I asked the modle to generate the result of the formula. Anthropic Claude 3 also generated similar numbers but not the same as GPT4o.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Mortgage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-03-Dynamic Formset</title>
      <link href="/2024/04/30/Inomad%20Dairy/03-Dynamic%20Formset.html"/>
      <url>/2024/04/30/Inomad%20Dairy/03-Dynamic%20Formset.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>When developing web applications that require flexible and dynamic user inputs, utilizing formsets in Django alongside JavaScript can significantly enhance user experience and functionality.</p><span id="more"></span><h2 id="Introduction"><strong>Introduction</strong></h2><p>When developing web applications that require flexible and dynamic user inputs, utilizing formsets in Django alongside JavaScript can significantly enhance user experience and functionality. This approach allows users to dynamically add or remove form instances, making the interface adaptable to various use cases. Below, I‚Äôll share insights from implementing dynamic formsets for product components and images in a Django application.</p><h2 id="Implementing-Dynamic-Formsets-in-Django"><strong>Implementing Dynamic Formsets in Django</strong></h2><p>Formsets in Django are a powerful feature that facilitates the management of multiple forms on a single page. This is particularly useful for scenarios where you need to handle multiple instances of a form, like adding multiple product components or images before submitting them all at once. <a href="https://docs.djangoproject.com/en/5.0/topics/forms/formsets/">More details</a></p><p>Example code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>forms <span class="token keyword">import</span> formset_factory<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> ProductComponentFormProductComponentFormSet <span class="token operator">=</span> formset_factory<span class="token punctuation">(</span>ProductComponentForm<span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code snippet initializes a formset for product components, with one extra form displayed by default.</p><p>To handle dynamic additions and deletions of form fields, you often also need initialize an empty form template in your HTML, often hidden using CSS.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Hidden template for dynamic addition --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empty-form-template<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    &#123;&#123; formset.empty_form &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Integrating-JavaScript-for-Dynamic-Form-Management"><strong>Integrating JavaScript for Dynamic Form Management</strong></h2><p>Use JavaScript to handle user actions like adding a new form or removing an existing one. This involves cloning the hidden template and updating attributes to maintain unique form identifiers.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'add-button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> totalForms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id_form-TOTAL_FORMS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> formIdx <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'empty-form-template'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newForm<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>    newForm<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newForm<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">__prefix__</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> formIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form-container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newForm<span class="token punctuation">)</span><span class="token punctuation">;</span>    totalForms<span class="token punctuation">.</span>value <span class="token operator">=</span> formIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It‚Äôs also practical to set a maximum number of forms that can be added to prevent overwhelming the user and the server.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">>=</span> maxForms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Maximum number of forms reached'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Handling-Deletions"><strong>Handling Deletions</strong></h2><p>Provide users the ability to remove forms, which involves adjusting the total form count and potentially handling the re-indexing of form IDs to maintain continuity.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'delete-button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> formToRemove <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'.form-instance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formToRemove<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> totalForms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id_form-TOTAL_FORMS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        totalForms<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>Integrating dynamic form elements into Django projects enhances user interactions and flexibility, allowing for a more responsive and intuitive interface. Using JavaScript alongside Django‚Äôs formsets makes managing complex forms straightforward, improving both the developer‚Äôs and the user‚Äôs experience.</p><p>By mastering these techniques, developers can implement more complex and user-friendly interfaces that cater to the needs of modern web applications.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> Form </tag>
            
            <tag> Formset </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad Dairy-02-Complex ProductModel</title>
      <link href="/2024/04/29/Inomad%20Dairy/02-Complex%20ProductModel.html"/>
      <url>/2024/04/29/Inomad%20Dairy/02-Complex%20ProductModel.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this blog post, I‚Äôll walk through how to model complex relationships between products using Django, specifically focusing on a scenario where products can be composed of other products, and vice versa.</p><span id="more"></span><p>This is a common requirement in industries like manufacturing, where products are often made up of various parts, each potentially being a product in itself.</p><h2 id="Modeling-the-Product-Relationships"><strong>Modeling the Product Relationships</strong></h2><p>We start by defining our Product model, which needs to handle relationships where a product can have components and also be a component of other products. Here‚Äôs how we can efficiently structure this in Django:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ProductComponent</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    parent <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'components'</span><span class="token punctuation">)</span>    part <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'part_of'</span><span class="token punctuation">)</span>    quantity <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this setup, ProductComponent acts as a linking model between Product instances, defining a many-to-many relationship from a product to its components through the foreign keys to Product.</p><h2 id="Admin-Interface-Setup"><strong>Admin Interface Setup</strong></h2><p>To manage these relationships effectively in Django‚Äôs admin interface, we set up the models to include inlines, allowing administrators to edit product components directly within product entries:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Product<span class="token punctuation">,</span> ProductComponent<span class="token keyword">class</span> <span class="token class-name">ProductComponentInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>TabularInline<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> ProductComponent    extra <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">ProductAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>ProductComponentInline<span class="token punctuation">]</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> ProductAdmin<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>ProductComponent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This configuration makes it straightforward to manage the complex hierarchies of products and their parts.</p><h2 id="Form-Handling"><strong>Form Handling</strong></h2><p>Handling forms for such a relationship involves using Django‚Äôs formsets to manage multiple product components within a single form interface. Here‚Äôs how you set up the forms:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> django<span class="token punctuation">.</span>forms <span class="token keyword">import</span> inlineformset_factory<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Product<span class="token punctuation">,</span> ProductComponent<span class="token keyword">class</span> <span class="token class-name">ProductForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Product        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>ProductComponentFormSet <span class="token operator">=</span> inlineformset_factory<span class="token punctuation">(</span>    parent<span class="token operator">=</span>Product<span class="token punctuation">,</span>    model<span class="token operator">=</span>ProductComponent<span class="token punctuation">,</span>    fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'part'</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    extra<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    can_delete<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And integrating this into a view:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">def</span> <span class="token function">manage_product</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> product_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> product_id<span class="token punctuation">:</span>        product <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>product_id<span class="token punctuation">)</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span>instance<span class="token operator">=</span>product<span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span>instance<span class="token operator">=</span>product<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> instance<span class="token operator">=</span>product <span class="token keyword">if</span> product_id <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> instance<span class="token operator">=</span>product <span class="token keyword">if</span> product_id <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> formset<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            created_product <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            formset<span class="token punctuation">.</span>instance <span class="token operator">=</span> created_product            formset<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'product_list'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'product/manage_product.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">,</span> <span class="token string">'formset'</span><span class="token punctuation">:</span> formset<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>This product model setup allows for a flexible and scalable way to manage complex product relationships in Django, making it easier to handle intricate product hierarchies and compositions for products like those in the manufacturing industry that require parent/component relationships.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> ProductModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-01-ProductModel</title>
      <link href="/2024/04/23/Inomad%20Dairy/01-ProductModel.html"/>
      <url>/2024/04/23/Inomad%20Dairy/01-ProductModel.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>As the business model of Inomad is updating constantly especially the product lines during the scaling-up stage, the product model also requires to be updated frequently.</p><span id="more"></span><p>It‚Äôs been a while since last time I update the Inomad series. The old demo on GitHub for <a href="https://github.com/Dogecat0/inomad-demo">Inomad</a> is still there, but quite out of date. I‚Äôve been working on the new version of Inomad, which is constantly updating the product lines and the product model. The categories, the materials, the colors, the sizes, the main product and variants, all these core attributes of the product model are fun to work with. Also another important part of Inomad product is the sustainable mateiral and recylcing idea. Hopefully I can share more about them soon and put website into production.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> ProductModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-04-Nodejs and Express</title>
      <link href="/2023/12/06/JavaScript%20Full%20Stack%20Series/04-Nodejs%20and%20Express.html"/>
      <url>/2023/12/06/JavaScript%20Full%20Stack%20Series/04-Nodejs%20and%20Express.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>Series of 04 blogs will cover the backend part of the full stack JavaScript development, towards implementing functionality on the server side of the stack. This blog covers the basics of Nodejs and Express, and how to use them to build a simple server.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Nodejs:<br>Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. <a href="https://nodejs.org/en/about/">More details</a></li><li>Express:<br>Imported as a module into Nodejs, Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. <a href="https://expressjs.com/">More details</a></li><li>Nodemon:<br>Nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. <a href="https://nodemon.io/">More details</a></li><li>Route parameters:<br>Route parameters are named URL segments that are used to capture the values specified at their position in the URL. <a href="https://expressjs.com/en/guide/routing.html#route-parameters">More details</a></li><li>Postman:<br>Postman is a collaboration platform for API development. Postman‚Äôs features simplify each step of building an API and streamline collaboration so you can create better APIs‚Äîfaster. <a href="https://www.postman.com/">More details</a></li><li>REST Client:<br>REST Client allows you to send HTTP request and view the response in Visual Studio Code directly. <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>[REST](<a href="https://dogecat0.github.io/2023/12/03/JavaScript">https://dogecat0.github.io/2023/12/03/JavaScript</a> Full Stack Series/03-Altering-Data-from-Server.html)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-03-Adding Styles</title>
      <link href="/2023/12/04/JavaScript%20Full%20Stack%20Series/03-Adding%20Styles.html"/>
      <url>/2023/12/04/JavaScript%20Full%20Stack%20Series/03-Adding%20Styles.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This will be simple blog that covers how to add styles to React applications with CSS. Since I‚Äôve learned it before plus more about Tailwind CSS, integrating Tailwind CSS with React and how to use it to style React components would be interesting to cover in the future blogs.</p><span id="more"></span><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>CSS:<br>CSS stands for Cascading Style Sheets. It is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. [More details](<a href="https://dogecat0.github.io/2023/11/07/JavaScript">https://dogecat0.github.io/2023/11/07/JavaScript</a> Full Stack Series/01-Fundamentals.html)</li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-use-of-className-in-React"><strong>The use of <code>className</code> in React:</strong></h3><p>In React, the <code>class</code> attribute is reserved for JavaScript classes. Instead, we use <code>className</code> to define the CSS class of an element.</p><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Created a simple React application that displays countries‚Äô info with its capital‚Äôs weather details plus search funtionalities. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/countries">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-03-Altering Data from Server</title>
      <link href="/2023/12/03/JavaScript%20Full%20Stack%20Series/03-Altering%20Data%20from%20Server.html"/>
      <url>/2023/12/03/JavaScript%20Full%20Stack%20Series/03-Altering%20Data%20from%20Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog will touch the base of sosme conventions used by jason-server and REST APIS in general, taking a look at the URLs and HTTP request types, in REST.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Object spread syntax:<br>The object spread syntax is a JavaScript feature that is used to make shallow copies of JavaScript objects. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>REST:<br>REST stands for Representational State Transfer. It is a software architectural style that defines a set of constraints to be used for creating Web services. In REST terminology, we refer to individual data objects, such as the notes in our application, as resources. Every resource has a unique address associated with it - its URL.</li><li>'S‚ÄôOLID:<br>Single responsibility principle, is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program‚Äôs functionality, which it should encapsulate. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. [More details](<a href="https://dogecat0.github.io/2023/11/30/JavaScript">https://dogecat0.github.io/2023/11/30/JavaScript</a> Full Stack Series/03-Get-Data-from-Server.html)<br>In front-end development, we often use promises to handle asynchronous operations such as network requests by using fetch method. <a href="https://javascript.info/promise-chaining#bigger-example-fetch">More details</a></li><li>then():<br>The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">More details</a></li><li>catch():<br>The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">More details</a></li><li>async/await:<br>The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result. Comparing to the traditional methods to handle promises like then() and catch(), async/await is more readable and easier to debug. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-palcement-of-useEffect-hook"><strong>The palcement of <code>useEffect</code> hook:</strong></h3><p>The <code>useEffect</code> is deigned to be called unconditionally at the top level of React component. The placement of the useEffect call at the top, middle, or end of the component function is a matter of preference and readability as long as it is in the function body of the component and not inside any conditionals or loops. <a href="https://react.dev/reference/react/useEffect">More details</a></p><h3 id="The-use-of-useEffect-hook"><strong>The use of <code>useEffect</code> hook:</strong></h3><p><code>useEffect</code> hook has two parameters (like the example code snippet shown below from <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part2/phonebook/src/App.jsx">exercise</a>) which are the callback function and the dependency array. The callback function is called after the component has been rendered into the DOM. The dependency array is used to specify the conditions for running the effect. If the dependency array is empty, the effect is run after every render. If there are items in the dependency array, the effect is only run when one of the values in the array changes. <a href="https://react.dev/reference/react/useEffect#useeffect">More details</a></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    personService      <span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">initialPersons</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setPersons</span><span class="token punctuation">(</span>initialPersons<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Updates to part2 exercise phonebook with CRUD operations. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/phonebook">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-03-Get Data from Server</title>
      <link href="/2023/11/30/JavaScript%20Full%20Stack%20Series/03-Get%20Data%20from%20Server.html"/>
      <url>/2023/11/30/JavaScript%20Full%20Stack%20Series/03-Get%20Data%20from%20Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog will touch the base of how to interact with server in React, how to use the <code>useEffect</code> hook to fetch data from server and more related concepts like <code>fetch</code>, <code>promises</code>, <code>event loop</code>.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Fetch method:<br>The fetch() method starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available. <a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">More details</a></li><li>Event loop:<br>The event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">More details</a></li><li>useEffect hook:<br>The <code>useEffect</code> is a React Hook that lets your synchronize a component with an external system. <a href="https://react.dev/reference/react/useEffect">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-you-see-when-accessing-base-url-of-a-server"><strong>The <code>&#123;&#125;</code> you see when accessing base url of a server</strong></h3><p>During the course we‚Äôre using JSON server. When you access the base url of a server, you will see a <code>&#123;&#125;</code>. This is because the server is returning a JSON object. The <code>&#123;&#125;</code> is the representation of the JSON object in the browser. This is not an eeror or problem, it is just how JSON Server handles requests to the root URL.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-03-Forms</title>
      <link href="/2023/11/29/JavaScript%20Full%20Stack%20Series/03-Forms.html"/>
      <url>/2023/11/29/JavaScript%20Full%20Stack%20Series/03-Forms.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers how to handle forms in React, how to use the <code>useState</code> hook to handle the state of the form and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>useState hook:<br>The <code>useState</code> hook is a function that takes in an initial value and returns an array of two items using array destructuring: the current state and a function that updates it. <a href="https://react.dev/reference/react/useState">More details</a></li><li>Controlled component:<br>In HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with <code>setState()</code>. <a href="https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="Three-important-parts-of-a-form"><strong>Three important parts of a form:</strong></h3><ul><li>onSubmit:<br>Attached to a form element, <code>onSubmit</code> is an event handler triggered when the form is submitted, typically when the user clicks a submit button.</li><li>input value attribute:<br>This attribute is used to set the initial value of the input element. This cannot be edited.</li><li>onChange:<br>To enable editing of the input element, we have to attach an <code>onChange</code> event handler to the input element. This event handler is triggered every time the value of the input element changes, i.e. when the user types something into the input field.</li><li>if else statement:<br>In JavaScript, the ternary operator <code>condition ? exprIfTrue : exprIfFalse</code> is used to conditionally render something. Alternatively, we can also use the <code>if else</code> statement to conditionally do the same job.</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something else</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">condition <span class="token operator">?</span>   <span class="token comment">// do something</span>  <span class="token operator">:</span>   <span class="token comment">// do something else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Refactoring-the-code-to-use-multiple-components"><strong>Refactoring the code to use multiple components:</strong></h3><ul><li>Keep the state in the parent component.</li><li>Pass the state and event handler down to the child component as props.</li><li>The child component calls the event handler with the appropriate parameters.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> Forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-03-Rendering Collections and Modules</title>
      <link href="/2023/11/28/JavaScript%20Full%20Stack%20Series/03-Rendering%20Collections%20and%20Modules.html"/>
      <url>/2023/11/28/JavaScript%20Full%20Stack%20Series/03-Rendering%20Collections%20and%20Modules.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers how to render collections in React, how to use the <code>map</code> method to iterate over an array of objects and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Map method:<br>The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">More details</a></li><li>Refacoring Modules:<br>Refactoring is the process of restructuring existing computer code‚Äîchanging the factoring‚Äîwithout changing its external behavior.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>[Destructuring assignment](<a href="https://dogecat0.github.io/2023/11/09/JavaScript">https://dogecat0.github.io/2023/11/09/JavaScript</a> Full Stack Series/02-JavaScript.html)</li><li>[Event Handler](<a href="https://dogecat0.github.io/2023/11/12/JavaScript">https://dogecat0.github.io/2023/11/12/JavaScript</a> Full Stack Series/02-State-and-Event-Handlers.html)</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Updates to part1 exercise courseinfo with refactorred modules and trying out JavaScript arrays methods like <code>map</code>. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-02-Comoplex State and Debugging</title>
      <link href="/2023/11/12/JavaScript%20Full%20Stack%20Series/02-Comoplex%20State%20and%20Debugging.html"/>
      <url>/2023/11/12/JavaScript%20Full%20Stack%20Series/02-Comoplex%20State%20and%20Debugging.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers some more complex React state related knowledge, as well as some ways to debug React apps. This part of the course covers quite a bit of new concpets and theoretical details, which requires more time to digest and practice.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Batching:<br>React batches state updates to improve performance. This means that multiple setState() calls in a single component are batched together by React into a single update for the DOM. React processes state updates after event handlers have finished running.</li><li>Updater function:<br>The updater function is a function that is passed to the setState() method, e.g. you can use <code>setNumber(n =&gt; n + 1)</code> to update some state multiple times in one event.</li><li>Hooks:<br>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks are functions that let you ‚Äúhook into‚Äù React state and lifecycle features from function components. Hooks don‚Äôt work inside classes ‚Äî they let you use React without classes. <a href="https://react.dev/reference/react/hooks">More details</a><br>Rules of hooks:<br>Hooks are JavaScript functions, but they impose two additional rules:</li><li>Only call Hooks at the top level. Don‚Äôt call Hooks inside loops, conditions, or nested functions.</li><li>Only call Hooks from React function components. Don‚Äôt call Hooks from regular JavaScript functions.</li></ul><p>Examples:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// these are ok</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Juha Tauriainen'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> age <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this does not work!</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>foobar<span class="token punctuation">,</span> setFoobar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> age<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// also this is not good</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>rightWay<span class="token punctuation">,</span> setRightWay<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">notGood</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// and this is also illegal</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment">//...</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Spread Operator: <code>...</code>The spread operator is used to expand elements of an iterable (like an array) into individual elements. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><p>Why use spread operator in React?</p><ul><li>It is used to make a copy of an object or an array. to make sure the original state is not mutated.</li><li>By creating a new boject or array, you ensure that React recognizes the change in the state and re-renders the component accordingly.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>Event Handling:<br>Event handlers must always be a function or a reference to a function. The button will not work if the event handler is set to a variable of any other type.</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise:</strong></h2><ol><li>Create a React app that displays the statistics of a feedback form. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/unicafe">Link to the repo</a></li><li>Create a React app that displays random anecdotes and the most voted one. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/anecdotes">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-02-State and Event Handlers</title>
      <link href="/2023/11/12/JavaScript%20Full%20Stack%20Series/02-State%20and%20Event%20Handlers.html"/>
      <url>/2023/11/12/JavaScript%20Full%20Stack%20Series/02-State%20and%20Event%20Handlers.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers some more React component basics, demonstrating helper functions, JavaScript destructuring for cleaner code, and dynamic page rendering in React applications.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>State:<br>In React, components need to ‚Äúremember‚Äù things: the current input value, the current image, the shopping cart. In React, this kind of component specfic memory is called state. <a href="https://react.dev/learn/state-a-components-memory">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>Destructuring assignment:<br>‚ÄúDestructuring make sthe assignment of variables very easy since we can use ti to extract and gather the values of an object‚Äôs properties into separate variables.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#destructuring">Full Stack Open</a>.</li><li>Event Handler</li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="Destructuring-assignment-example"><strong>Destructuring assignment example:</strong></h3><ul><li>From this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> prop<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> props<span class="token punctuation">.</span>age    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>To this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Then to this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The props that are passed to the component are destructured directly into variables <code>name</code> and <code>age</code>. This is a common pattern in React applications.</p><h3 id="Event-Handler"><strong>Event Handler:</strong></h3><ul><li>Event Handler as a Function or Reference:<br>An event handler should be either a function or a function reference. Direct function calls as event handlers (like <code>onClick=&#123;setCounter(counter + 1)&#125;</code>) can lead to errors, as they execute immediately during rendering, causing unintended behavior like infinite re-renders.</li><li>Use of Arrow Functions:<br>To prevent immediate execution and control when the event handler is called (like on a user action), arrow functions are used. For example, <code>onClick=&#123;() =&gt; setCounter(counter + 1)&#125;</code> ensures that <code>setCounter</code> is called only when the button is clicked.</li></ul><h3 id="Useful-Notes"><strong>Useful Notes:</strong></h3><ul><li>‚ÄúDo not ever try to guess what your code does. It is just better to use <code>console.log</code> and see with your own eyes what it does.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#changes-in-state-cause-rerendering">Full Stack Open</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-00-SES</title>
      <link href="/2023/11/10/Inomad%20Dairy/00-SES.html"/>
      <url>/2023/11/10/Inomad%20Dairy/00-SES.html</url>
      
        <content type="html"><![CDATA[<h2 id="ü•≥üéä"><strong>ü•≥üéä</strong></h2><p>I have been thinking to start a series about the e-commerce platform <a href="https://github.com/Dogecat0/inomad-demo">Inomad</a> for quite a while now. However, I was not sure about the content of the series and how to structure it. The thinking is till going on but I‚Äôve decided to start it anyway. So, here we go, let‚Äôs begin with a small celebration today.</p><p>After almost a week waiting for the SES service to be approved, Inomad finally got the approval email from AWS. Thanks to the <a href="https://github.com/django-ses/django-ses">django-ses</a> package, I was able to set up the email service quite easily with just set <code>EMAIL_BACKEND = django_ses.SESBackend</code> in the <code>settings.py </code>file.</p><p>TBC‚Ä¶</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> AWS </tag>
            
            <tag> SES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-02-JavaScript</title>
      <link href="/2023/11/09/JavaScript%20Full%20Stack%20Series/02-JavaScript.html"/>
      <url>/2023/11/09/JavaScript%20Full%20Stack%20Series/02-JavaScript.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This post covers the basics of JavaScript together with the new concepts and lessons learned during this part of the course.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><h3 id="Variables"><strong>Variables</strong></h3><ul><li>const:<br>The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.</li><li>let:<br>The let statement declares a block-scoped local variable, optionally initializing it to a value.</li></ul><h3 id="Arrays"><strong>Arrays</strong></h3><ul><li>Concat():<br>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</li><li>Destructuring assignment:<br>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</li></ul><h3 id="Objects"><strong>Objects</strong></h3><ul><li>Object literal:<br>An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).</li><li>Object methods and ‚Äúthis‚Äù:<br>A method is a function which is a property of an object. It is called using the syntax objectName.methodName(). In a method, this refers to the owner object. In other words, this.firstName means the firstName property of this object. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">More details</a></li><li>Bind:<br>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><ul><li>There are many similarities between JavaScript and Python, such as the syntax of for loop, functions like <code>map</code>, <code>reduce</code>, etc. However, there are also many differences between them, such as the way of declaring variables, the way of creating functions, etc. In short, the syntax of JavaScript is slightly a confusing thing for me so far when, unfortunately, everytime Python comes to my mind first. At the moment they‚Äôre like two angles fighting in my head‚Ä¶üòÇ</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>A simple React app that displays some contents of courses. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-02-React</title>
      <link href="/2023/11/08/JavaScript%20Full%20Stack%20Series/02-React.html"/>
      <url>/2023/11/08/JavaScript%20Full%20Stack%20Series/02-React.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This post will cover React and related concepts like Vite, Components, JSX, etc which comprise the part1-a of the course together with some of my thoughts and lessons learned.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>React:<br>React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of their applications efficiently. <a href="https://react.dev/">More details</a></li><li>Vite:<br>Vite is a modern frontend build tool that provides a faster and leaner development experience for web projects. It uses native ES modules for serving code instead of bundling during development, which results in significantly faster start times. It supports frameworks like React, Vue, Svelte, and more. <a href="https://vitejs.dev/">Mode details</a></li><li>React components:<br>Components are one of the core concepts of React. They are the foundation upon which you build user interfaces. <a href="https://react.dev/learn/your-first-component">More details</a></li><li>JSX:<br>JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. React components use JSX to represent the HTML markup. <a href="https://react.dev/learn/writing-markup-with-jsx">More details</a><br /><br>Main rules of JSX:<ul><li>Return a single root element</li><li>Use camelCase for HTML attributes</li><li>Close all tags</li></ul></li><li>Props: Props are short for properties. React components use props to communicate with each other. Every parent component can pass some information to its child components by give them props. <a href="https://react.dev/learn/passing-props-to-a-component">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><ul><li>‚ÄúSoftware development is hard. It gets even harder if one is not using all the possible available tools such as the web-console and debug printing with console.log. Professionals use both all the time and there is no single reason why a beginner should not adopt the use of these wonderful helper methods that will make life so much easier.‚Äù - <a href="https://fullstackopen.com/en/part1/introduction_to_react#props-passing-data-to-components">Full Stack Open</a></li><li>There are two ways to pass props to React components:  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The first way is to pass the props object to the component function and access the properties of the props object with dot notation.  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> course <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The second way is called destructuring assignment. It is a special syntax for neatly assigning values taken directly from an object to variables.<br><br>(* Comparative thinking: Think of it as a similar way of passing parameters to a function in Python but using different braces.)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack Series-01-Fundamentals</title>
      <link href="/2023/11/07/JavaScript%20Full%20Stack%20Series/01-Fundamentals.html"/>
      <url>/2023/11/07/JavaScript%20Full%20Stack%20Series/01-Fundamentals.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will be covering the fundamentals of web apps, which is the part0 of the course and list the concepts I‚Äôve reviewed and learned so far.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Callback function:<br>A callback function is a fuction passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. More details: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a></li><li>Event handler:<br>Event are signals fired inside the browser window that notify of changes in the browser or operating system. Programmers can create event handler code that will run when an event fires, allowing web pages to responde appropriately to change. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">Event handler</a></li></ul><p>(* Comparative thinkging: In Python, you can create an event handler using <a href="https://docs.djangoproject.com/en/4.2/topics/signals/">Django signals</a> which has the similar mechanism.)</p><ul><li>AJAX (Asynchronous JavaScript and XML):<br>AJAX is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With AJAX, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started">AJAX</a></li></ul><p>(* Comparative thinkging: <a href="https://htmx.org/docs/">HTMX</a> is a modern JavaScript library that allows you to access AJAX, CSS Transitions, WebSockets, and Server-Sent Events directly in HTML, using attributes without writing JavaScript.)</p><ul><li>SPA (Single Page Application)</li><li>JavaScript libraries:<br>jQuey, AngularJS, React, Vue.js, Backbone.js, etc.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>HTML (HyperText Markup Language):<br>HTML is the code that is used to structure a web page and its content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics">More details</a></li><li>CSS (Cascading Style Sheet):<br>CSS is the code taht styles web content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">More details</a></li><li>HTML forms:<br>HTML forms are one of the main points of interaction between a user and a web site or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage. <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form">More details</a></li><li>HTTP request</li><li>DOM (Document Objcet Model):<br>DOM connects web pages to scripts or programming languages by representing the structure of a document‚Äîsuch as the HTML representing a web page‚Äîin memory. The DOM represents a document with a logical tree. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">More details</a></li><li>Full-stack web development</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise:</strong></h2><ol><li>Review HTML</li><li>Review CSS</li><li>Review HTML forms</li><li>Create a diagram depicting the situation where the user creates a new note on the page <a href="https://studies.cs.helsinki.fi/exampleapp/notes">https://studies.cs.helsinki.fi/exampleapp/notes</a> by writing something into the text field and clicking the Save button. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user goes to the single-page app version of the notes app at <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/spa_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user creates a new note using the single-page version of the app. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_spa_diagram.md">Submmited diagram</a>.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Full Stack-00-Introduction</title>
      <link href="/2023/11/06/JavaScript%20Full%20Stack%20Series/00-Introduction.html"/>
      <url>/2023/11/06/JavaScript%20Full%20Stack%20Series/00-Introduction.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>I‚Äôve been building a Python based website for a while now which mainly focuses on backend development using Django (The project is currently still under development, Here is the link to <a href="https://github.com/Dogecat0/inomad-demo">INOMAD</a> demo repo).</p><p>This Django project is my first web development project and a self-taught one. Although there has been some involvement of JavaScript in the project, I‚Äôve never really had the chance to learn JavaScript in-depth, which seems to be a quite essential language for mordern web development. So, I‚Äôve decided to start a full-stack course and also begin this series of blog posts about my learning journey. I believe it will help me reinforce the web development concepts I‚Äôve learned so far, as well as learn new tools in a more structured way.</p><h2 id="üìñ-Content"><strong>üìñ Content</strong></h2><p>This series will mainly cover the following topics based on the course itself:</p><ul><li>Fundamentals of Web Apps</li><li>React</li><li>Prgramming a server with Node.js and Express.js</li><li>Testing Express servers and React apps</li><li>User administration</li><li>Advanced state management</li><li>React router, custom hooks, styling app with CSS and webpack</li><li>GraphQL</li><li>TypeScript</li><li>React Native</li><li>CI/CD</li><li>Containers</li><li>Relationship databases</li></ul><h2 id="üéì-Course-Details"><strong>üéì Course Details</strong></h2><p>You can find the full course details in the following link: <a href="https://fullstackopen.com/en/about">Full Stack Open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
