<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-JavaScript</title>
      <link href="/2023/11/09/JavaScript-Full-Stack-Series-02-JavaScript.html"/>
      <url>/2023/11/09/JavaScript-Full-Stack-Series-02-JavaScript.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This post covers the basics of JavaScript together with the new concepts and lessons learned during this part of the course.</p><h2 id="üí°-New-concepts">üí° New concepts</h2><h3 id="Variables">Variables</h3><ul><li>Const: The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.</li><li>let: The let statement declares a block-scoped local variable, optionally initializing it to a value.</li></ul><h3 id="Arrays">Arrays</h3><ul><li>Concat(): The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</li><li>Destructuring assignment: The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</li></ul><h3 id="Objects">Objects</h3><ul><li>Object literal: An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).</li><li>Object methods and ‚Äúthis‚Äù: A method is a function which is a property of an object. It is called using the syntax objectName.methodName(). In a method, this refers to the owner object. In other words, this.firstName means the firstName property of this object. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">More details</a></li><li>Bind: The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><ul><li>There are many similarities between JavaScript and Python, such as the syntax of for loop, functions like <code>map</code>, <code>reduce</code>, etc. However, there are also many differences between them, such as the way of declaring variables, the way of creating functions, etc. In short, the syntax of JavaScript is slightly a confusing thing for me so far when, unfortunately, everytime Python comes to my mind first. At the moment they‚Äôre like two angles fighting in my head‚Ä¶üòÇ</li></ul><h2 id="üìù-Course-exercise">üìù Course exercise</h2><ol><li>A simple React app that displays some contents of courses. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-React</title>
      <link href="/2023/11/08/JavaScript-Full-Stack-Series-02-React.html"/>
      <url>/2023/11/08/JavaScript-Full-Stack-Series-02-React.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>This post will cover React and related concepts like Vite, Components, JSX, etc which comprise the part1-a of the course together with some of my thoughts and lessons learned.</p><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>React: React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of their applications efficiently. <a href="https://react.dev/">More details</a></li><li>Vite: Vite is a modern frontend build tool that provides a faster and leaner development experience for web projects. It uses native ES modules for serving code instead of bundling during development, which results in significantly faster start times. It supports frameworks like React, Vue, Svelte, and more. <a href="https://vitejs.dev/">Mode details</a></li><li>React components: Components are one of the core concepts of React. They are the foundation upon which you build user interfaces. <a href="https://react.dev/learn/your-first-component">More details</a></li><li>JSX: JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. React components use JSX to represent the HTML markup. <a href="https://react.dev/learn/writing-markup-with-jsx">More details</a><br /><br>Main rules of JSX:<ul><li>Return a single root element</li><li>Use camelCase for HTML attributes</li><li>Close all tags</li></ul></li><li>Props: Props are short for properties. React components use props to communicate with each other. Every parent component can pass some information to its child components by give them props. <a href="https://react.dev/learn/passing-props-to-a-component">More details</a></li></ul><h2 id="üìö-Lessons-learned">üìö Lessons learned</h2><ul><li>‚ÄúSoftware development is hard. It gets even harder if one is not using all the possible available tools such as the web-console and debug printing with console.log. Professionals use both all the time and there is no single reason why a beginner should not adopt the use of these wonderful helper methods that will make life so much easier.‚Äù - <a href="https://fullstackopen.com/en/part1/introduction_to_react#props-passing-data-to-components">Full Stack Open</a></li><li>There are two ways to pass props to React components:  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The first way is to pass the props object to the component function and access the properties of the props object with dot notation.  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> course <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The second way is called destructuring assignment. It is a special syntax for neatly assigning values taken directly from an object to variables.<br><br>(* Comparative thinking: Think of it as a similar way of passing parameters to a function in Python but using different braces.)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-01-Fundamentals</title>
      <link href="/2023/11/07/JavaScript-Full-Stack-Series-01-Fundamentals.html"/>
      <url>/2023/11/07/JavaScript-Full-Stack-Series-01-Fundamentals.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>In this post, I will be covering the fundamentals of web apps, which is the part0 of the course and list the concepts I‚Äôve reviewed and learned so far.</p><h2 id="üí°-New-concepts">üí° New concepts</h2><ul><li>Callback function: A callback function is a fuction passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. More details: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a></li><li>Event handler: Event are signals fired inside the browser window that notify of changes in the browser or operating system. Programmers can create event handler code that will run when an event fires, allowing web pages to responde appropriately to change. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">Event handler</a></li></ul><p>(* Comparative thinkging: In Python, you can create an event handler using <a href="https://docs.djangoproject.com/en/4.2/topics/signals/">Django signals</a> which has the similar mechanism.)</p><ul><li>AJAX (Asynchronous JavaScript and XML): AJAX is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With AJAX, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started">AJAX</a></li></ul><p>(* Comparative thinkging: <a href="https://htmx.org/docs/">HTMX</a> is a modern JavaScript library that allows you to access AJAX, CSS Transitions, WebSockets, and Server-Sent Events directly in HTML, using attributes without writing JavaScript.)</p><ul><li>SPA (Single Page Application)</li><li>JavaScript libraries: jQuey, AngularJS, React, Vue.js, Backbone.js, etc.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts">üë®‚Äçüíª Reviewed concepts</h2><ul><li>HTML (HyperText Markup Language): HTML is the code that is used to structure a web page and its content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics">More details</a></li><li>CSS (Cascading Style Sheet): CSS is the code taht styles web content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">More details</a></li><li>HTML forms: HTML forms are one of the main points of interaction between a user and a web site or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage. <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form">More details</a></li><li>HTTP request</li><li>DOM (Document Objcet Model): DOM connects web pages to scripts or programming languages by representing the structure of a document‚Äîsuch as the HTML representing a web page‚Äîin memory. The DOM represents a document with a logical tree. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">More details</a></li><li>Full-stack web development</li></ul><h2 id="üìù-Course-exercise">üìù Course exercise:</h2><ol><li>Review HTML</li><li>Review CSS</li><li>Review HTML forms</li><li>Create a diagram depicting the situation where the user creates a new note on the page <a href="https://studies.cs.helsinki.fi/exampleapp/notes">https://studies.cs.helsinki.fi/exampleapp/notes</a> by writing something into the text field and clicking the Save button. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user goes to the single-page app version of the notes app at <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/spa_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user creates a new note using the single-page version of the app. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_spa_diagram.md">Submmited diagram</a>.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-00-Introduction</title>
      <link href="/2023/11/06/JavaScript-Full-Stack-Series-00-Introduction.html"/>
      <url>/2023/11/06/JavaScript-Full-Stack-Series-00-Introduction.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro">üîé Intro</h2><p>I‚Äôve been building a Python based website for a while now which mainly focuses on backend development using Django (The project is currently still under development, Here is the link to <a href="https://github.com/Dogecat0/inomad-demo">INOMAD</a> demo repo).</p><p>This Django project is my first web development project and a self-taught one. Although there has been some involvement of JavaScript in the project, I‚Äôve never really had the chance to learn JavaScript in-depth, which seems to be a quite essential language for mordern web development. So, I‚Äôve decided to start a full-stack course and also begin this series of blog posts about my learning journey. I believe it will help me reinforce the web development concepts I‚Äôve learned so far, as well as learn new tools in a more structured way.</p><h2 id="üìñ-Content">üìñ Content</h2><p>This series will mainly cover the following topics based on the course itself:</p><ul><li>Fundamentals of Web Apps</li><li>React</li><li>Prgramming a server with Node.js and Express.js</li><li>Testing Express servers and React apps</li><li>User administration</li><li>Advanced state management</li><li>React router, custom hooks, styling app with CSS and webpack</li><li>GraphQL</li><li>TypeScript</li><li>React Native</li><li>CI/CD</li><li>Containers</li><li>Relationship databases</li></ul><h2 id="üéì-Course-Details">üéì Course Details</h2><p>You can find the full course details in the following link: <a href="https://fullstackopen.com/en/about">Full Stack Open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Full Stack </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
