<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>04-Infrastructure-Foundations_of_Cloud_Computing</title>
      <link href="/2024/05/27/Inomad-Dairy/04-Infrastructure-Foundations-of-Cloud-Computing.html"/>
      <url>/2024/05/27/Inomad-Dairy/04-Infrastructure-Foundations-of-Cloud-Computing.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>From this post onwards, I will start exploring the related knowledge of infrastructure for software applications, particularly in the cloud. This post will cover the basics of cloud computing.</p><span id="more"></span><h2 id="‚òÅÔ∏è-Core-Foundations-of-Cloud-Computing"><strong>‚òÅÔ∏è Core Foundations of Cloud Computing</strong></h2><p>Cloud computing is a technology paradigm that allows users to access and store data and applications on remote servers over the internet rather than on local servers or personal computers. This model offers flexibility, scalability, and cost efficiency. Here are the core foundations of cloud computing:</p><h2 id="1-On-Demand-Self-Service">1. On-Demand Self-Service</h2><ul><li>Definition: Users can provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with each service provider.</li><li>Key Features: Web-based interfaces, automation tools, API access.</li></ul><h2 id="2-Broad-Network-Access">2. Broad Network Access</h2><ul><li>Definition: Cloud services are available over the network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, tablets, laptops, and workstations).</li><li>Key Features: Accessibility from any device, anywhere.</li></ul><h2 id="3-Resource-Pooling">3. Resource Pooling</h2><ul><li>Definition: The provider‚Äôs computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand.</li><li>Key Features: Location independence, resource sharing, virtualization.</li></ul><h2 id="4-Rapid-Elasticity">4. Rapid Elasticity</h2><ul><li>Definition: Capabilities can be elastically provisioned and released to scale rapidly outward and inward with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time.</li><li>Key Features: Scalability, flexibility, auto-scaling.</li></ul><h2 id="5-Measured-Service">5. Measured Service</h2><ul><li>Definition: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</li><li>Key Features: Pay-per-use, metered service, resource monitoring, billing.</li></ul><p>These core foundations are the building blocks of cloud computing that enable businesses to scale and grow without the need for significant capital investment in infrastructure. Next, I will explore the cloud service models and deployment models.</p><h2 id="üß©-Cloud-Service-Model"><strong>üß© Cloud Service Model</strong></h2><p>Cloud computing services are typically categorized into three service models based on the level of abstraction and control they provide to users. These models are Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS).</p><h2 id="Infrastructure-as-a-Service-IaaS">Infrastructure as a Service (IaaS)</h2><ul><li>Definition: Provides virtualized computing resources over the internet. It offers fundamental computing resources such as virtual machines, storage, and networks.</li><li>Examples: Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP).</li><li>Use Cases: Hosting websites, running enterprise applications, backup and disaster recovery.</li></ul><h2 id="Platform-as-a-Service-PaaS">Platform as a Service (PaaS)</h2><ul><li>Definition: Provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure.</li><li>Examples: Heroku, Google App Engine, Microsoft Azure App Service.</li><li>Use Cases: Web application development, mobile application development, API development.</li></ul><h2 id="Software-as-a-Service-SaaS">Software as a Service (SaaS)</h2><ul><li>Definition: Delivers software applications over the internet, on a subscription basis, eliminating the need for organizations to install and run applications on their own computers or data centers.</li><li>Examples: Salesforce, Google Workspace, Microsoft Office 365.</li><li>Use Cases: CRM, email services, collaboration tools.</li></ul><h2 id="üöÄ-Cloud-Deployment-Models"><strong>üöÄ Cloud Deployment Models</strong></h2><p>Cloud deployment models define the type of cloud environment based on ownership, size, and access. The common deployment models are Public Cloud, Private Cloud, Hybrid Cloud, and Community Cloud.</p><h2 id="Public-Cloud">Public Cloud</h2><ul><li>Definition: Services are delivered over the public internet and shared across multiple organizations.</li><li>Benefits: Cost-effective, scalable, no maintenance overhead.</li><li>Examples: AWS, Azure, GCP.</li></ul><h2 id="Private-Cloud">Private Cloud</h2><ul><li>Definition: Services are maintained on a private network for a single organization, providing greater control and security.</li><li>Benefits: Enhanced security, compliance, customizable.</li><li>Examples: VMware vSphere, OpenStack.</li></ul><h2 id="Hybrid-Cloud">Hybrid Cloud</h2><ul><li>Definition: Combines public and private clouds, allowing data and applications to be shared between them.</li><li>Benefits: Flexibility, cost-efficiency, improved security.</li><li>Examples: Microsoft Azure Stack, AWS Outposts.</li></ul><h2 id="Community-Cloud">Community Cloud</h2><ul><li>Definition: A collaborative effort in which infrastructure is shared between several organizations from a specific community with common concerns (e.g., security, compliance).</li><li>Benefits: Cost-sharing, improved collaboration.</li><li>Examples: Government cloud services.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Infrastructure </tag>
            
            <tag> Cloud Computing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-02-Investing-or-Paying-off-Mortgage</title>
      <link href="/2024/05/21/Investment/02-Investing-or-Paying-off-Mortgage.html"/>
      <url>/2024/05/21/Investment/02-Investing-or-Paying-off-Mortgage.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In the last post, I quickly compared the outcomes of investing in the stock market or paying off the mortgage early over a 2-year and 5-year period. In this post, I‚Äôll explore the option of investing in stocks and paying off the mortage simultaneously, and see how the numbers stack up for 2-year period.</p><span id="more"></span><h2 id="Assumptions"><strong>Assumptions</strong></h2><ul><li>Monthly Cash Available: ¬£2,000</li><li>Monthly Mortgage Payment: ¬£2,000</li><li>Mortgage Interest Rate: 5.8%</li><li>Investment Return Rate: 7% - 10% per year (In this case we will use midpoint 8.5% for illustration)</li><li>Investment Period: 2 years and 5 years</li><li>Remaining Mortgage Amount (Principal): ¬£111,000</li><li>Maximum Early Repayment without Penalty per year: ¬£11,000</li></ul><p>We‚Äôll use two scenarios this time to do our analysis:</p><h2 id="Scenario-1-Invest-in-stocks-with-¬£2-000-monthly-and-withdraw-¬£11-000-towards-the-mortgage-at-the-end-of-year"><strong>Scenario 1: Invest in stocks with ¬£2,000 monthly and withdraw ¬£11,000 towards the mortgage at the end of year.</strong></h2><h3 id="Investment-Growth"><strong>Investment Growth:</strong></h3><ul><li>Year 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£24,000 * 1.085 - ¬£11,000 &#x3D; ¬£15,040<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Year 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£15,040 * (1 + 0.085&#x2F;12)**12 + ¬£2,000 * ((1 + 0.085&#x2F;12)**12 - 1)&#x2F;(0.085&#x2F;12) - ¬£11,000 &amp;approx ¬£30,139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Mortgage-Reduction"><strong>Mortgage Reduction:</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly interest rate: 5.8%&#x2F;12 &#x3D; 0.0048333Year 1:Month 1: Principal &#x3D; ¬£111,000Interest &#x3D; ¬£111,000 * 0.0048333 &#x3D; ¬£536.99Payment &#x3D; ¬£2,000Principal Reduction &#x3D; ¬£2,000 ‚àí ¬£536.99 &#x3D; ¬£1,463.01New Principal &#x3D; ¬£111,000 ‚àí ¬£1,463.01 &#x3D; ¬£109,536.99‚Äã&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Continue this calculation for 24 months to get the peirod-end principal.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Function to calculate the amortization schedule and interest savings</span><span class="token keyword">def</span> <span class="token function">calculate_amortization_schedule</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> monthly_payment<span class="token punctuation">,</span> extra_annual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> extra_monthly<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    monthly_rate <span class="token operator">=</span> rate <span class="token operator">/</span> <span class="token number">12</span> <span class="token operator">/</span> <span class="token number">100</span>    schedule <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    total_interest_paid <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> month <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 2 years = 24 months</span>        interest <span class="token operator">=</span> principal <span class="token operator">*</span> monthly_rate        principal_reduction <span class="token operator">=</span> monthly_payment <span class="token operator">-</span> interest        total_payment <span class="token operator">=</span> monthly_payment        <span class="token keyword">if</span> extra_monthly <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            total_payment <span class="token operator">+=</span> extra_monthly            principal_reduction <span class="token operator">+=</span> extra_monthly        principal <span class="token operator">-=</span> principal_reduction        total_interest_paid <span class="token operator">+=</span> interest        schedule<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> total_payment<span class="token punctuation">,</span> interest<span class="token punctuation">,</span> principal_reduction<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> month <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> extra_annual <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            principal <span class="token operator">-=</span> extra_annual    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>schedule<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token string">'Total Payment'</span><span class="token punctuation">,</span> <span class="token string">'Interest'</span><span class="token punctuation">,</span> <span class="token string">'Principal Reduction'</span><span class="token punctuation">,</span> <span class="token string">'Remaining Principal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_interest_paid<span class="token comment"># Scenario 1: $2,000 monthly, $11,000 annual extra payment</span>principal_1 <span class="token operator">=</span> <span class="token number">111000</span>monthly_payment_1 <span class="token operator">=</span> <span class="token number">2000</span>extra_annual_1 <span class="token operator">=</span> <span class="token number">11000</span>schedule_1<span class="token punctuation">,</span> total_interest_1 <span class="token operator">=</span> calculate_amortization_schedule<span class="token punctuation">(</span>principal_1<span class="token punctuation">,</span> <span class="token number">5.8</span><span class="token punctuation">,</span> monthly_payment_1<span class="token punctuation">,</span> extra_annual_1<span class="token punctuation">)</span><span class="token comment"># Scenario 2: $2,000 monthly, $900 monthly extra payment</span>principal_2 <span class="token operator">=</span> <span class="token number">111000</span>monthly_payment_2 <span class="token operator">=</span> <span class="token number">2000</span>extra_monthly_2 <span class="token operator">=</span> <span class="token number">900</span>schedule_2<span class="token punctuation">,</span> total_interest_2 <span class="token operator">=</span> calculate_amortization_schedule<span class="token punctuation">(</span>principal_2<span class="token punctuation">,</span> <span class="token number">5.8</span><span class="token punctuation">,</span> monthly_payment_2<span class="token punctuation">,</span> extra_monthly<span class="token operator">=</span>extra_monthly_2<span class="token punctuation">)</span><span class="token keyword">import</span> ace_tools <span class="token keyword">as</span> tools<span class="token punctuation">;</span> tools<span class="token punctuation">.</span>display_dataframe_to_user<span class="token punctuation">(</span><span class="token string">"Scenario 1 Amortization Schedule"</span><span class="token punctuation">,</span> schedule_1<span class="token punctuation">)</span><span class="token keyword">import</span> ace_tools <span class="token keyword">as</span> tools<span class="token punctuation">;</span> tools<span class="token punctuation">.</span>display_dataframe_to_user<span class="token punctuation">(</span><span class="token string">"Scenario 2 Amortization Schedule"</span><span class="token punctuation">,</span> schedule_2<span class="token punctuation">)</span>total_interest_1<span class="token punctuation">,</span> total_interest_2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Total interest paid over 2 years: $10,197.47</p><h2 id="Scenario-2-Invest-in-stocks-with-¬£1-100-monthly-and-use-¬£900-towards-the-mortgage-at-each-month"><strong>Scenario 2: Invest in stocks with ¬£1,100 monthly and use ¬£900 towards the mortgage at each month.</strong></h2><h3 id="Investment-Growth-2"><strong>Investment Growth:</strong></h3><ul><li>Year 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">Year-end Investment Value &#x3D; ¬£1,100 * ((1 + 0.085&#x2F;12)**24 - 1)&#x2F;(0.085&#x2F;12) &amp;approx ¬£27,480<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‚Äã</p><h3 id="Mortgage-Reduction-2"><strong>Mortgage Reduction:</strong></h3><pre class="line-numbers language-none"><code class="language-none">Month 1:Principal &#x3D; ¬£111,000Interest &#x3D; ¬£111,000√ó0.0048333 &#x3D; ¬£536.99Payment &#x3D; ¬£2,000 + ¬£900 ‚àí ¬£536.99 &#x3D; ¬£2,363.01New Principal &#x3D; ¬£111,000 ‚àí ¬£2,363.01 &#x3D; ¬£108,636.99‚Äã&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Continue this calculation for 24 months to get the peirod-end principal using the same calculation as above.</p><p>Total interest paid over 2 years: $9,608.45</p><h2 id="Conclusion"><strong>Conclusion</strong></h2><h3 id="Scenario-1">**Scenario 1: **</h3><ul><li>Total interest paid over 2 years: ¬£10,197.47</li><li>Investment value after 2 years: ¬£30,139</li></ul><h3 id="Scenario-2"><strong>Scenario 2:</strong></h3><ul><li>Scenario 2: Total interest paid over 2 years: ¬£9,608.45</li><li>Investment value after 2 years: ¬£27,480</li></ul><p>In this case, the second scenario is better as it results in lower interest paid and a higher investment value after 2 years with the difference of ¬£589.02. However, the Investment value is still lower than the Scenario 1 due to the lower monthly investment amount with the difference of ¬£2,659.</p><p>So in summary, scenario 1 is gaining more in total at ¬£2,659 - ¬£589.02 = ¬£2069.98 in 2-year period.</p><h2 id="Intersting-Insights"><strong>Intersting Insights</strong></h2><p>Again this whole analysis was generated using GPT4o. Although the accuracy and the numbers are not 100% accurate, the insights are very interesting and the short of amount of time it took to generate this analysis is very impressive. This could be further developed to provide more accurate and detailed analysis for sure but more importantly, it can be used as a tool to generate ideas and insights for personal finance.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Mortgage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Investment-01-Investing-or-Paying-off-Mortgage</title>
      <link href="/2024/05/20/Investment/01-Investing-or-Paying-off-Mortgage.html"/>
      <url>/2024/05/20/Investment/01-Investing-or-Paying-off-Mortgage.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this blog post, I‚Äôll run a quick analysis on the common dilemma of whether to invest extra money or pay off your mortgage early. In the current high interest situtaion, this has become a question that stays in my mind.</p><span id="more"></span><p>When deciding whether to invest in the stock market or pay off your mortgage, it‚Äôs essential to weigh the potential returns against the guaranteed savings. Based on some current interest rates in UK and the annual stocks return rate of US market in recent years, let‚Äôs use some imaginary assumptions and break down the numbers for both options over a 2-year and 5-year period to quickly compare the outcomes.</p><h2 id="Assumptions"><strong>Assumptions</strong></h2><ul><li>Monthly Cash Available: ¬£2,000</li><li>Monthly Mortgage Payment: ¬£2,000</li><li>Mortgage Interest Rate: 5.8%</li><li>Investment Return Rate: 7% - 10% per year</li><li>Investment Period: 2 years and 5 years</li></ul><h2 id="Investing-in-Stocks"><strong>Investing in Stocks</strong></h2><h3 id="2-Year-Scenario"><strong>2-Year Scenario</strong></h3><p>Using the Future Value formula, we can calculate the future value of the investment after 2 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; P * (((1 + r&#x2F;n)**(n*t) - 1) &#x2F; (r&#x2F;n))FV &#x3D; ¬£2,000 * (((1 + 0.07&#x2F;12)**(12*2) - 1) &#x2F; (0.07&#x2F;12)) &amp;approx ¬£51,362FV &#x3D; ¬£2,000 * (((1 + 0.10&#x2F;12)**(12*2) - 1) &#x2F; (0.10&#x2F;12)) &amp;approx ¬£52,894<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Where:<br>P: Monthly investment amount<br>r: Annual interest rate (expressed as a decimal, e.g., 0.07 for 7%)<br>n: Number of compounding periods per year<br>t: Number of years</p><h3 id="5-Year-Scenario"><strong>5-Year Scenario</strong></h3><p>Similarly, we can calculate the future value of the investment after 5 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; ¬£2,000 * (((1 + 0.07&#x2F;12)**(12*5) - 1) &#x2F; (0.07&#x2F;12)) &amp;approx ¬£143,186FV &#x3D; ¬£2,000 * (((1 + 0.10&#x2F;12)**(12*5) - 1) &#x2F; (0.10&#x2F;12)) &amp;approx ¬£154,875<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Paying-off-Mortgage"><strong>Paying off Mortgage</strong></h2><h3 id="2-Year-Scenario-2"><strong>2-Year Scenario</strong></h3><p>Using the modified Future Value formula, we can calculate the mortgage reduction for the future value of an annuity due after 2 years:</p><pre class="line-numbers language-none"><code class="language-none">FV &#x3D; P * (((1 + r&#x2F;n)**(n*t) - 1) &#x2F; (r&#x2F;n)) * (1 + r&#x2F;n)FV &#x3D; ¬£2,000 * (((1 + 0.058&#x2F;12)**(12*2) - 1) &#x2F; (0.058&#x2F;12)) * (1 + 0.058&#x2F;12) &amp;approx ¬£51,617<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-Year-Scenario-2"><strong>5-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Similarly, we can calculate the mortgage reduction for the future value of an annuity due after 5 years:FV &#x3D; ¬£2,000 * (((1 + 0.058&#x2F;12)**(12*5) - 1) &#x2F; (0.058&#x2F;12)) * (1 + 0.058&#x2F;12) &amp;approx ¬£138,385<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Free-Cash-FLow-from-Paying-off-Mortgage"><strong>Free Cash FLow from Paying off Mortgage</strong></h2><p>After paying off the mortgage early, the extra cash flow would be substantial.</p><h3 id="2-Year-Scenario-3"><strong>2-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly Cash Flow: ¬£2000 * (1 + 0.058&#x2F;12)**(12*2) &#x2F; ((1 + 0.058&#x2F;12)**(12*2) - 1) &#x3D; ¬£2,200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Year-Scenario-3"><strong>5-Year Scenario</strong></h3><pre class="line-numbers language-none"><code class="language-none">Monthly Cash Flow: ¬£2000 * (1 + 0.058&#x2F;12)**(12*5) &#x2F; ((1 + 0.058&#x2F;12)**(12*5) - 1) &#x3D; ¬£2,500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>Based on the assumptions and calculations above, it‚Äôs clear that investing in the stock market can yield higher returns compared to paying off the mortgage early. However, the decision ultimately depends on the risk tolerance, financial goals, and personal circumstances. It‚Äôs essential to consider the opportunity cost of investing in the stock market versus the guaranteed savings from paying off the mortgage early.</p><p><strong>Investing in Stocks</strong>:</p><ul><li>2-Year Scenario Return: ¬£51,362 - ¬£52,894</li><li>5-Year Scenario Return: ¬£143,186 - ¬£154,875</li></ul><p><strong>Paying off Mortgage</strong>:</p><ul><li>2-Year Scenario Savings: ¬£51,617</li><li>5-Year Scenario Savings: ¬£138,385</li></ul><p><strong>Free Cash Flow from Paying off Mortgage</strong>:</p><ul><li>2-Year Scenario: ¬£2,200</li><li>5-Year Scenario: ¬£2,500</li></ul><h2 id="Conclusion"><strong>Conclusion</strong></h2><ul><li>For a 2-year horizon, investing in stocks might yield higher returns (7.0% to 10.19%) compared to the guaranteed savings from paying off the mortgage (7.53%), but comes with higher risk.</li><li>For a 5-year horizon, investing in stocks likely provides higher returns (19.32% to 29.06%) compared to paying off the mortgage (15.32%). However, the market risk remains.</li><li>Extra cash flow from paying off the mortgage early would significantly enhance your monthly savings once the mortgage is fully paid off.</li></ul><p>This analysis provides a clear comparison to help you decide based on your risk tolerance and preference for guaranteed savings versus potential higher returns.</p><h2 id="Interesting-Notes"><strong>Interesting Notes</strong></h2><p>The analysis above was fully generated by GPT4o model. I tried to validate the numbers, it appears that there are some margin of errors in the calculations around ¬£1,000 - ¬£2,000 each time I asked the modle to generate the result of the formula. Anthropic Claude 3 also generated similar numbers but not the same as GPT4o.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
            <tag> Mortgage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-03-Dynamic-Formset</title>
      <link href="/2024/04/30/Inomad-Dairy/03-Dynamic-Formset.html"/>
      <url>/2024/04/30/Inomad-Dairy/03-Dynamic-Formset.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>When developing web applications that require flexible and dynamic user inputs, utilizing formsets in Django alongside JavaScript can significantly enhance user experience and functionality.</p><span id="more"></span><h2 id="Introduction"><strong>Introduction</strong></h2><p>When developing web applications that require flexible and dynamic user inputs, utilizing formsets in Django alongside JavaScript can significantly enhance user experience and functionality. This approach allows users to dynamically add or remove form instances, making the interface adaptable to various use cases. Below, I‚Äôll share insights from implementing dynamic formsets for product components and images in a Django application.</p><h2 id="Implementing-Dynamic-Formsets-in-Django"><strong>Implementing Dynamic Formsets in Django</strong></h2><p>Formsets in Django are a powerful feature that facilitates the management of multiple forms on a single page. This is particularly useful for scenarios where you need to handle multiple instances of a form, like adding multiple product components or images before submitting them all at once. <a href="https://docs.djangoproject.com/en/5.0/topics/forms/formsets/">More details</a></p><p>Example code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>forms <span class="token keyword">import</span> formset_factory<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> ProductComponentFormProductComponentFormSet <span class="token operator">=</span> formset_factory<span class="token punctuation">(</span>ProductComponentForm<span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code snippet initializes a formset for product components, with one extra form displayed by default.</p><p>To handle dynamic additions and deletions of form fields, you often also need initialize an empty form template in your HTML, often hidden using CSS.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Hidden template for dynamic addition --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empty-form-template<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    &#123;&#123; formset.empty_form &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Integrating-JavaScript-for-Dynamic-Form-Management"><strong>Integrating JavaScript for Dynamic Form Management</strong></h2><p>Use JavaScript to handle user actions like adding a new form or removing an existing one. This involves cloning the hidden template and updating attributes to maintain unique form identifiers.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'add-button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> totalForms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id_form-TOTAL_FORMS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> formIdx <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'empty-form-template'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newForm<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>    newForm<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newForm<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">__prefix__</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> formIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form-container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newForm<span class="token punctuation">)</span><span class="token punctuation">;</span>    totalForms<span class="token punctuation">.</span>value <span class="token operator">=</span> formIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It‚Äôs also practical to set a maximum number of forms that can be added to prevent overwhelming the user and the server.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">>=</span> maxForms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Maximum number of forms reached'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Handling-Deletions"><strong>Handling Deletions</strong></h2><p>Provide users the ability to remove forms, which involves adjusting the total form count and potentially handling the re-indexing of form IDs to maintain continuity.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'delete-button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> formToRemove <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'.form-instance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formToRemove<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> totalForms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id_form-TOTAL_FORMS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        totalForms<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>totalForms<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>Integrating dynamic form elements into Django projects enhances user interactions and flexibility, allowing for a more responsive and intuitive interface. Using JavaScript alongside Django‚Äôs formsets makes managing complex forms straightforward, improving both the developer‚Äôs and the user‚Äôs experience.</p><p>By mastering these techniques, developers can implement more complex and user-friendly interfaces that cater to the needs of modern web applications.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> Form </tag>
            
            <tag> Formset </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-02-Complex-ProductModel</title>
      <link href="/2024/04/29/Inomad-Dairy/02-Complex-ProductModel.html"/>
      <url>/2024/04/29/Inomad-Dairy/02-Complex-ProductModel.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this blog post, I‚Äôll walk through how to model complex relationships between products using Django, specifically focusing on a scenario where products can be composed of other products, and vice versa.</p><span id="more"></span><p>This is a common requirement in industries like manufacturing, where products are often made up of various parts, each potentially being a product in itself.</p><h2 id="Modeling-the-Product-Relationships"><strong>Modeling the Product Relationships</strong></h2><p>We start by defining our Product model, which needs to handle relationships where a product can have components and also be a component of other products. Here‚Äôs how we can efficiently structure this in Django:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ProductComponent</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    parent <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'components'</span><span class="token punctuation">)</span>    part <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'part_of'</span><span class="token punctuation">)</span>    quantity <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this setup, ProductComponent acts as a linking model between Product instances, defining a many-to-many relationship from a product to its components through the foreign keys to Product.</p><h2 id="Admin-Interface-Setup"><strong>Admin Interface Setup</strong></h2><p>To manage these relationships effectively in Django‚Äôs admin interface, we set up the models to include inlines, allowing administrators to edit product components directly within product entries:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Product<span class="token punctuation">,</span> ProductComponent<span class="token keyword">class</span> <span class="token class-name">ProductComponentInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>TabularInline<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> ProductComponent    extra <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">ProductAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>ProductComponentInline<span class="token punctuation">]</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Product<span class="token punctuation">,</span> ProductAdmin<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>ProductComponent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This configuration makes it straightforward to manage the complex hierarchies of products and their parts.</p><h2 id="Form-Handling"><strong>Form Handling</strong></h2><p>Handling forms for such a relationship involves using Django‚Äôs formsets to manage multiple product components within a single form interface. Here‚Äôs how you set up the forms:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> django<span class="token punctuation">.</span>forms <span class="token keyword">import</span> inlineformset_factory<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Product<span class="token punctuation">,</span> ProductComponent<span class="token keyword">class</span> <span class="token class-name">ProductForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Product        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>ProductComponentFormSet <span class="token operator">=</span> inlineformset_factory<span class="token punctuation">(</span>    parent<span class="token operator">=</span>Product<span class="token punctuation">,</span>    model<span class="token operator">=</span>ProductComponent<span class="token punctuation">,</span>    fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'part'</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    extra<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    can_delete<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And integrating this into a view:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">def</span> <span class="token function">manage_product</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> product_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> product_id<span class="token punctuation">:</span>        product <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>product_id<span class="token punctuation">)</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span>instance<span class="token operator">=</span>product<span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span>instance<span class="token operator">=</span>product<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ProductForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> instance<span class="token operator">=</span>product <span class="token keyword">if</span> product_id <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        formset <span class="token operator">=</span> ProductComponentFormSet<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> instance<span class="token operator">=</span>product <span class="token keyword">if</span> product_id <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> formset<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            created_product <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            formset<span class="token punctuation">.</span>instance <span class="token operator">=</span> created_product            formset<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'product_list'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'product/manage_product.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">,</span> <span class="token string">'formset'</span><span class="token punctuation">:</span> formset<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><strong>Summary</strong></h2><p>This product model setup allows for a flexible and scalable way to manage complex product relationships in Django, making it easier to handle intricate product hierarchies and compositions for products like those in the manufacturing industry that require parent/component relationships.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> ProductModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-01-ProductModel</title>
      <link href="/2024/04/23/Inomad-Dairy/01-ProductModel.html"/>
      <url>/2024/04/23/Inomad-Dairy/01-ProductModel.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>As the business model of Inomad is updating constantly especially the product lines during the scaling-up stage, the product model also requires to be updated frequently.</p><span id="more"></span><p>It‚Äôs been a while since last time I update the Inomad series. The old demo on GitHub for <a href="https://github.com/Dogecat0/inomad-demo">Inomad</a> is still there, but quite out of date. I‚Äôve been working on the new version of Inomad, which is constantly updating the product lines and the product model. The categories, the materials, the colors, the sizes, the main product and variants, all these core attributes of the product model are fun to work with. Also another important part of Inomad product is the sustainable mateiral and recylcing idea. Hopefully I can share more about them soon and put website into production.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> Django </tag>
            
            <tag> ProductModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-04-Nodejs-and-Express</title>
      <link href="/2023/12/06/JavaScript-Full-Stack-Series/04-Nodejs-and-Express.html"/>
      <url>/2023/12/06/JavaScript-Full-Stack-Series/04-Nodejs-and-Express.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>Series of 04 blogs will cover the backend part of the full stack JavaScript development, towards implementing functionality on the server side of the stack. This blog covers the basics of Nodejs and Express, and how to use them to build a simple server.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Nodejs:<br>Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. <a href="https://nodejs.org/en/about/">More details</a></li><li>Express:<br>Imported as a module into Nodejs, Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. <a href="https://expressjs.com/">More details</a></li><li>Nodemon:<br>Nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. <a href="https://nodemon.io/">More details</a></li><li>Route parameters:<br>Route parameters are named URL segments that are used to capture the values specified at their position in the URL. <a href="https://expressjs.com/en/guide/routing.html#route-parameters">More details</a></li><li>Postman:<br>Postman is a collaboration platform for API development. Postman‚Äôs features simplify each step of building an API and streamline collaboration so you can create better APIs‚Äîfaster. <a href="https://www.postman.com/">More details</a></li><li>REST Client:<br>REST Client allows you to send HTTP request and view the response in Visual Studio Code directly. <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li><a href="https://dogecat0.github.io/2023/12/03/JavaScript-Full-Stack-Series/03-Altering-Data-from-Server.html">REST</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Adding-Styles</title>
      <link href="/2023/12/04/JavaScript-Full-Stack-Series/03-Adding-Styles.html"/>
      <url>/2023/12/04/JavaScript-Full-Stack-Series/03-Adding-Styles.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This will be simple blog that covers how to add styles to React applications with CSS. Since I‚Äôve learned it before plus more about Tailwind CSS, integrating Tailwind CSS with React and how to use it to style React components would be interesting to cover in the future blogs.</p><span id="more"></span><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>CSS:<br>CSS stands for Cascading Style Sheets. It is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. <a href="https://dogecat0.github.io/2023/11/07/JavaScript-Full-Stack-Series/01-Fundamentals.html">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-use-of-className-in-React"><strong>The use of <code>className</code> in React:</strong></h3><p>In React, the <code>class</code> attribute is reserved for JavaScript classes. Instead, we use <code>className</code> to define the CSS class of an element.</p><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Created a simple React application that displays countries‚Äô info with its capital‚Äôs weather details plus search funtionalities. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/countries">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Altering-Data-from-Server</title>
      <link href="/2023/12/03/JavaScript-Full-Stack-Series/03-Altering-Data-from-Server.html"/>
      <url>/2023/12/03/JavaScript-Full-Stack-Series/03-Altering-Data-from-Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog will touch the base of sosme conventions used by jason-server and REST APIS in general, taking a look at the URLs and HTTP request types, in REST.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Object spread syntax:<br>The object spread syntax is a JavaScript feature that is used to make shallow copies of JavaScript objects. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>REST:<br>REST stands for Representational State Transfer. It is a software architectural style that defines a set of constraints to be used for creating Web services. In REST terminology, we refer to individual data objects, such as the notes in our application, as resources. Every resource has a unique address associated with it - its URL.</li><li>'S‚ÄôOLID:<br>Single responsibility principle, is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program‚Äôs functionality, which it should encapsulate. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. <a href="https://dogecat0.github.io/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html">More details</a><br>In front-end development, we often use promises to handle asynchronous operations such as network requests by using fetch method. <a href="https://javascript.info/promise-chaining#bigger-example-fetch">More details</a></li><li>then():<br>The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">More details</a></li><li>catch():<br>The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">More details</a></li><li>async/await:<br>The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result. Comparing to the traditional methods to handle promises like then() and catch(), async/await is more readable and easier to debug. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-palcement-of-useEffect-hook"><strong>The palcement of <code>useEffect</code> hook:</strong></h3><p>The <code>useEffect</code> is deigned to be called unconditionally at the top level of React component. The placement of the useEffect call at the top, middle, or end of the component function is a matter of preference and readability as long as it is in the function body of the component and not inside any conditionals or loops. <a href="https://react.dev/reference/react/useEffect">More details</a></p><h3 id="The-use-of-useEffect-hook"><strong>The use of <code>useEffect</code> hook:</strong></h3><p><code>useEffect</code> hook has two parameters (like the example code snippet shown below from <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part2/phonebook/src/App.jsx">exercise</a>) which are the callback function and the dependency array. The callback function is called after the component has been rendered into the DOM. The dependency array is used to specify the conditions for running the effect. If the dependency array is empty, the effect is run after every render. If there are items in the dependency array, the effect is only run when one of the values in the array changes. <a href="https://react.dev/reference/react/useEffect#useeffect">More details</a></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    personService      <span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">initialPersons</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setPersons</span><span class="token punctuation">(</span>initialPersons<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Updates to part2 exercise phonebook with CRUD operations. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/phonebook">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Get-Data-from-Server</title>
      <link href="/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html"/>
      <url>/2023/11/30/JavaScript-Full-Stack-Series/03-Get-Data-from-Server.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog will touch the base of how to interact with server in React, how to use the <code>useEffect</code> hook to fetch data from server and more related concepts like <code>fetch</code>, <code>promises</code>, <code>event loop</code>.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Fetch method:<br>The fetch() method starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available. <a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch">More details</a></li><li>Promise:<br>The promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">More details</a></li><li>Event loop:<br>The event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">More details</a></li><li>useEffect hook:<br>The <code>useEffect</code> is a React Hook that lets your synchronize a component with an external system. <a href="https://react.dev/reference/react/useEffect">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="The-you-see-when-accessing-base-url-of-a-server"><strong>The <code>&#123;&#125;</code> you see when accessing base url of a server</strong></h3><p>During the course we‚Äôre using JSON server. When you access the base url of a server, you will see a <code>&#123;&#125;</code>. This is because the server is returning a JSON object. The <code>&#123;&#125;</code> is the representation of the JSON object in the browser. This is not an eeror or problem, it is just how JSON Server handles requests to the root URL.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Forms</title>
      <link href="/2023/11/29/JavaScript-Full-Stack-Series/03-Forms.html"/>
      <url>/2023/11/29/JavaScript-Full-Stack-Series/03-Forms.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers how to handle forms in React, how to use the <code>useState</code> hook to handle the state of the form and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>useState hook:<br>The <code>useState</code> hook is a function that takes in an initial value and returns an array of two items using array destructuring: the current state and a function that updates it. <a href="https://react.dev/reference/react/useState">More details</a></li><li>Controlled component:<br>In HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with <code>setState()</code>. <a href="https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="Three-important-parts-of-a-form"><strong>Three important parts of a form:</strong></h3><ul><li>onSubmit:<br>Attached to a form element, <code>onSubmit</code> is an event handler triggered when the form is submitted, typically when the user clicks a submit button.</li><li>input value attribute:<br>This attribute is used to set the initial value of the input element. This cannot be edited.</li><li>onChange:<br>To enable editing of the input element, we have to attach an <code>onChange</code> event handler to the input element. This event handler is triggered every time the value of the input element changes, i.e. when the user types something into the input field.</li><li>if else statement:<br>In JavaScript, the ternary operator <code>condition ? exprIfTrue : exprIfFalse</code> is used to conditionally render something. Alternatively, we can also use the <code>if else</code> statement to conditionally do the same job.</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something else</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">condition <span class="token operator">?</span>   <span class="token comment">// do something</span>  <span class="token operator">:</span>   <span class="token comment">// do something else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Refactoring-the-code-to-use-multiple-components"><strong>Refactoring the code to use multiple components:</strong></h3><ul><li>Keep the state in the parent component.</li><li>Pass the state and event handler down to the child component as props.</li><li>The child component calls the event handler with the appropriate parameters.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> Forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-03-Rendering_Collections-and-Modules</title>
      <link href="/2023/11/28/JavaScript-Full-Stack-Series/03-Rendering-Collections-and-Modules.html"/>
      <url>/2023/11/28/JavaScript-Full-Stack-Series/03-Rendering-Collections-and-Modules.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers how to render collections in React, how to use the <code>map</code> method to iterate over an array of objects and more related concepts.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Map method:<br>The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">More details</a></li><li>Refacoring Modules:<br>Refactoring is the process of restructuring existing computer code‚Äîchanging the factoring‚Äîwithout changing its external behavior.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li><a href="https://dogecat0.github.io/2023/11/09/JavaScript-Full-Stack-Series/02-JavaScript.html">Destructuring assignment</a></li><li><a href="https://dogecat0.github.io/2023/11/12/JavaScript-Full-Stack-Series/02-State-and-Event-Handlers.html">Event Handler</a></li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>Updates to part1 exercise courseinfo with refactorred modules and trying out JavaScript arrays methods like <code>map</code>. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part2/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-Comoplex_State_and_Debugging</title>
      <link href="/2023/11/12/JavaScript-Full-Stack-Series/02-Comoplex-State-and-Debugging.html"/>
      <url>/2023/11/12/JavaScript-Full-Stack-Series/02-Comoplex-State-and-Debugging.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers some more complex React state related knowledge, as well as some ways to debug React apps. This part of the course covers quite a bit of new concpets and theoretical details, which requires more time to digest and practice.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Batching:<br>React batches state updates to improve performance. This means that multiple setState() calls in a single component are batched together by React into a single update for the DOM. React processes state updates after event handlers have finished running.</li><li>Updater function:<br>The updater function is a function that is passed to the setState() method, e.g. you can use <code>setNumber(n =&gt; n + 1)</code> to update some state multiple times in one event.</li><li>Hooks:<br>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks are functions that let you ‚Äúhook into‚Äù React state and lifecycle features from function components. Hooks don‚Äôt work inside classes ‚Äî they let you use React without classes. <a href="https://react.dev/reference/react/hooks">More details</a><br>Rules of hooks:<br>Hooks are JavaScript functions, but they impose two additional rules:</li><li>Only call Hooks at the top level. Don‚Äôt call Hooks inside loops, conditions, or nested functions.</li><li>Only call Hooks from React function components. Don‚Äôt call Hooks from regular JavaScript functions.</li></ul><p>Examples:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// these are ok</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Juha Tauriainen'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> age <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this does not work!</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>foobar<span class="token punctuation">,</span> setFoobar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> age<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// also this is not good</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>rightWay<span class="token punctuation">,</span> setRightWay<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">notGood</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// and this is also illegal</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment">//...</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Spread Operator: <code>...</code>The spread operator is used to expand elements of an iterable (like an array) into individual elements. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">More details</a></li></ul><p>Why use spread operator in React?</p><ul><li>It is used to make a copy of an object or an array. to make sure the original state is not mutated.</li><li>By creating a new boject or array, you ensure that React recognizes the change in the state and re-renders the component accordingly.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>Event Handling:<br>Event handlers must always be a function or a reference to a function. The button will not work if the event handler is set to a variable of any other type.</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise:</strong></h2><ol><li>Create a React app that displays the statistics of a feedback form. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/unicafe">Link to the repo</a></li><li>Create a React app that displays random anecdotes and the most voted one. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/anecdotes">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-State_and_Event_Handlers</title>
      <link href="/2023/11/12/JavaScript-Full-Stack-Series/02-State-and-Event-Handlers.html"/>
      <url>/2023/11/12/JavaScript-Full-Stack-Series/02-State-and-Event-Handlers.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This blog covers some more React component basics, demonstrating helper functions, JavaScript destructuring for cleaner code, and dynamic page rendering in React applications.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>State:<br>In React, components need to ‚Äúremember‚Äù things: the current input value, the current image, the shopping cart. In React, this kind of component specfic memory is called state. <a href="https://react.dev/learn/state-a-components-memory">More details</a></li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>Destructuring assignment:<br>‚ÄúDestructuring make sthe assignment of variables very easy since we can use ti to extract and gather the values of an object‚Äôs properties into separate variables.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#destructuring">Full Stack Open</a>.</li><li>Event Handler</li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><h3 id="Destructuring-assignment-example"><strong>Destructuring assignment example:</strong></h3><ul><li>From this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> prop<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> props<span class="token punctuation">.</span>age    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>To this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Then to this:</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        Hello </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">, you are </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token plain-text"> years old      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">So you were probably born in </span><span class="token punctuation">&#123;</span><span class="token function">bornYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The props that are passed to the component are destructured directly into variables <code>name</code> and <code>age</code>. This is a common pattern in React applications.</p><h3 id="Event-Handler"><strong>Event Handler:</strong></h3><ul><li>Event Handler as a Function or Reference:<br>An event handler should be either a function or a function reference. Direct function calls as event handlers (like <code>onClick=&#123;setCounter(counter + 1)&#125;</code>) can lead to errors, as they execute immediately during rendering, causing unintended behavior like infinite re-renders.</li><li>Use of Arrow Functions:<br>To prevent immediate execution and control when the event handler is called (like on a user action), arrow functions are used. For example, <code>onClick=&#123;() =&gt; setCounter(counter + 1)&#125;</code> ensures that <code>setCounter</code> is called only when the button is clicked.</li></ul><h3 id="Useful-Notes"><strong>Useful Notes:</strong></h3><ul><li>‚ÄúDo not ever try to guess what your code does. It is just better to use <code>console.log</code> and see with your own eyes what it does.‚Äù - <a href="https://fullstackopen.com/en/part1/component_state_event_handlers#changes-in-state-cause-rerendering">Full Stack Open</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inomad-Dairy-00-SES</title>
      <link href="/2023/11/10/Inomad-Dairy/00-SES.html"/>
      <url>/2023/11/10/Inomad-Dairy/00-SES.html</url>
      
        <content type="html"><![CDATA[<h2 id="ü•≥üéä"><strong>ü•≥üéä</strong></h2><p>I have been thinking to start a series about the e-commerce platform <a href="https://github.com/Dogecat0/inomad-demo">Inomad</a> for quite a while now. However, I was not sure about the content of the series and how to structure it. The thinking is till going on but I‚Äôve decided to start it anyway. So, here we go, let‚Äôs begin with a small celebration today.</p><p>After almost a week waiting for the SES service to be approved, Inomad finally got the approval email from AWS. Thanks to the <a href="https://github.com/django-ses/django-ses">django-ses</a> package, I was able to set up the email service quite easily with just set <code>EMAIL_BACKEND = django_ses.SESBackend</code> in the <code>settings.py </code>file.</p><p>TBC‚Ä¶</p>]]></content>
      
      
      
        <tags>
            
            <tag> Inomad </tag>
            
            <tag> AWS </tag>
            
            <tag> SES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-JavaScript</title>
      <link href="/2023/11/09/JavaScript-Full-Stack-Series/02-JavaScript.html"/>
      <url>/2023/11/09/JavaScript-Full-Stack-Series/02-JavaScript.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This post covers the basics of JavaScript together with the new concepts and lessons learned during this part of the course.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><h3 id="Variables"><strong>Variables</strong></h3><ul><li>const:<br>The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.</li><li>let:<br>The let statement declares a block-scoped local variable, optionally initializing it to a value.</li></ul><h3 id="Arrays"><strong>Arrays</strong></h3><ul><li>Concat():<br>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</li><li>Destructuring assignment:<br>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</li></ul><h3 id="Objects"><strong>Objects</strong></h3><ul><li>Object literal:<br>An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).</li><li>Object methods and ‚Äúthis‚Äù:<br>A method is a function which is a property of an object. It is called using the syntax objectName.methodName(). In a method, this refers to the owner object. In other words, this.firstName means the firstName property of this object. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">More details</a></li><li>Bind:<br>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><ul><li>There are many similarities between JavaScript and Python, such as the syntax of for loop, functions like <code>map</code>, <code>reduce</code>, etc. However, there are also many differences between them, such as the way of declaring variables, the way of creating functions, etc. In short, the syntax of JavaScript is slightly a confusing thing for me so far when, unfortunately, everytime Python comes to my mind first. At the moment they‚Äôre like two angles fighting in my head‚Ä¶üòÇ</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise</strong></h2><ol><li>A simple React app that displays some contents of courses. <a href="https://github.com/Dogecat0/fullstack_open/tree/main/part1/courseinfo">Link to the repo</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-02-React</title>
      <link href="/2023/11/08/JavaScript-Full-Stack-Series/02-React.html"/>
      <url>/2023/11/08/JavaScript-Full-Stack-Series/02-React.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>This post will cover React and related concepts like Vite, Components, JSX, etc which comprise the part1-a of the course together with some of my thoughts and lessons learned.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>React:<br>React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of their applications efficiently. <a href="https://react.dev/">More details</a></li><li>Vite:<br>Vite is a modern frontend build tool that provides a faster and leaner development experience for web projects. It uses native ES modules for serving code instead of bundling during development, which results in significantly faster start times. It supports frameworks like React, Vue, Svelte, and more. <a href="https://vitejs.dev/">Mode details</a></li><li>React components:<br>Components are one of the core concepts of React. They are the foundation upon which you build user interfaces. <a href="https://react.dev/learn/your-first-component">More details</a></li><li>JSX:<br>JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. React components use JSX to represent the HTML markup. <a href="https://react.dev/learn/writing-markup-with-jsx">More details</a><br /><br>Main rules of JSX:<ul><li>Return a single root element</li><li>Use camelCase for HTML attributes</li><li>Close all tags</li></ul></li><li>Props: Props are short for properties. React components use props to communicate with each other. Every parent component can pass some information to its child components by give them props. <a href="https://react.dev/learn/passing-props-to-a-component">More details</a></li></ul><h2 id="üìö-Lessons-learned"><strong>üìö Lessons learned</strong></h2><ul><li>‚ÄúSoftware development is hard. It gets even harder if one is not using all the possible available tools such as the web-console and debug printing with console.log. Professionals use both all the time and there is no single reason why a beginner should not adopt the use of these wonderful helper methods that will make life so much easier.‚Äù - <a href="https://fullstackopen.com/en/part1/introduction_to_react#props-passing-data-to-components">Full Stack Open</a></li><li>There are two ways to pass props to React components:  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The first way is to pass the props object to the component function and access the properties of the props object with dot notation.  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> course <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>course<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>The second way is called destructuring assignment. It is a special syntax for neatly assigning values taken directly from an object to variables.<br><br>(* Comparative thinking: Think of it as a similar way of passing parameters to a function in Python but using different braces.)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-01-Fundamentals</title>
      <link href="/2023/11/07/JavaScript-Full-Stack-Series/01-Fundamentals.html"/>
      <url>/2023/11/07/JavaScript-Full-Stack-Series/01-Fundamentals.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>In this post, I will be covering the fundamentals of web apps, which is the part0 of the course and list the concepts I‚Äôve reviewed and learned so far.</p><span id="more"></span><h2 id="üí°-New-concepts"><strong>üí° New concepts</strong></h2><ul><li>Callback function:<br>A callback function is a fuction passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. More details: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a></li><li>Event handler:<br>Event are signals fired inside the browser window that notify of changes in the browser or operating system. Programmers can create event handler code that will run when an event fires, allowing web pages to responde appropriately to change. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">Event handler</a></li></ul><p>(* Comparative thinkging: In Python, you can create an event handler using <a href="https://docs.djangoproject.com/en/4.2/topics/signals/">Django signals</a> which has the similar mechanism.)</p><ul><li>AJAX (Asynchronous JavaScript and XML):<br>AJAX is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With AJAX, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. More details: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started">AJAX</a></li></ul><p>(* Comparative thinkging: <a href="https://htmx.org/docs/">HTMX</a> is a modern JavaScript library that allows you to access AJAX, CSS Transitions, WebSockets, and Server-Sent Events directly in HTML, using attributes without writing JavaScript.)</p><ul><li>SPA (Single Page Application)</li><li>JavaScript libraries:<br>jQuey, AngularJS, React, Vue.js, Backbone.js, etc.</li></ul><h2 id="üë®‚Äçüíª-Reviewed-concepts"><strong>üë®‚Äçüíª Reviewed concepts</strong></h2><ul><li>HTML (HyperText Markup Language):<br>HTML is the code that is used to structure a web page and its content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics">More details</a></li><li>CSS (Cascading Style Sheet):<br>CSS is the code taht styles web content. <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">More details</a></li><li>HTML forms:<br>HTML forms are one of the main points of interaction between a user and a web site or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage. <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form">More details</a></li><li>HTTP request</li><li>DOM (Document Objcet Model):<br>DOM connects web pages to scripts or programming languages by representing the structure of a document‚Äîsuch as the HTML representing a web page‚Äîin memory. The DOM represents a document with a logical tree. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">More details</a></li><li>Full-stack web development</li></ul><h2 id="üìù-Course-exercise"><strong>üìù Course exercise:</strong></h2><ol><li>Review HTML</li><li>Review CSS</li><li>Review HTML forms</li><li>Create a diagram depicting the situation where the user creates a new note on the page <a href="https://studies.cs.helsinki.fi/exampleapp/notes">https://studies.cs.helsinki.fi/exampleapp/notes</a> by writing something into the text field and clicking the Save button. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user goes to the single-page app version of the notes app at <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/spa_diagram.md">Submmited diagram</a>.</li><li>Create a diagram depicting the situation where the user creates a new note using the single-page version of the app. Link to the <a href="https://github.com/Dogecat0/fullstack_open/blob/main/part0/new_note_spa_diagram.md">Submmited diagram</a>.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Full-Stack-Series-00-Introduction</title>
      <link href="/2023/11/06/JavaScript-Full-Stack-Series/00-Introduction.html"/>
      <url>/2023/11/06/JavaScript-Full-Stack-Series/00-Introduction.html</url>
      
        <content type="html"><![CDATA[<h2 id="üîé-Intro"><strong>üîé Intro</strong></h2><p>I‚Äôve been building a Python based website for a while now which mainly focuses on backend development using Django (The project is currently still under development, Here is the link to <a href="https://github.com/Dogecat0/inomad-demo">INOMAD</a> demo repo).</p><p>This Django project is my first web development project and a self-taught one. Although there has been some involvement of JavaScript in the project, I‚Äôve never really had the chance to learn JavaScript in-depth, which seems to be a quite essential language for mordern web development. So, I‚Äôve decided to start a full-stack course and also begin this series of blog posts about my learning journey. I believe it will help me reinforce the web development concepts I‚Äôve learned so far, as well as learn new tools in a more structured way.</p><h2 id="üìñ-Content"><strong>üìñ Content</strong></h2><p>This series will mainly cover the following topics based on the course itself:</p><ul><li>Fundamentals of Web Apps</li><li>React</li><li>Prgramming a server with Node.js and Express.js</li><li>Testing Express servers and React apps</li><li>User administration</li><li>Advanced state management</li><li>React router, custom hooks, styling app with CSS and webpack</li><li>GraphQL</li><li>TypeScript</li><li>React Native</li><li>CI/CD</li><li>Containers</li><li>Relationship databases</li></ul><h2 id="üéì-Course-Details"><strong>üéì Course Details</strong></h2><p>You can find the full course details in the following link: <a href="https://fullstackopen.com/en/about">Full Stack Open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
